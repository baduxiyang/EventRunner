{"name":"GEA","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_214"},"sections":{"items":[{"components":[{"name":"labelRunning","style":{"weight":"1.2"},"text":"Running","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"buttonON","style":{"weight":"0.50"},"text":"ON","type":"button"},{"name":"buttonOFF","style":{"weight":"0.50"},"text":"OFF","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelVersion","style":{"weight":"1.2"},"text":"Version :","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelIntervalle","style":{"weight":"1.2"},"text":"Intervalle :","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelPortables","style":{"weight":"1.2"},"text":"Portables :","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelDebug","style":{"weight":"1.2"},"text":"Debug :","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_214"}}},"uiCallbacks":[{"callback":"buttonON_onReleased","eventType":"onReleased","name":"buttonON"},{"callback":"buttonOFF_onReleased","eventType":"onReleased","name":"buttonOFF"}],"quickAppVariables":[{"name":"GEA_Tasks","value":""},{"name":"GEA_History","value":"[\"22:11:51 : #1 Démarrage GEA\"]"},{"name":"SuspendreGEA","value":"non"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":false,"content":"-- =================================================================================================\r\n-- QuickApp      : GEA : Gestionnaire d'Evénements Automatique\r\n-- Auteur        : Steven en collaboration avec Pepite et Thibaut\r\n--                 Lazer : QuickApp pour HC3\r\n-- Version       : 7.10\r\n-- Date          : Décembre 2020\r\n-- Remerciements : Tous les utilisateurs/testeurs/apporteurs d'idées du forum domotique-fibaro.fr\r\n-- =================================================================================================\r\n--\r\n-- Changements version HC3 par rapport à HC2 :\r\n--\r\n-- Supprimé :\r\n--  \"VirtualDevice\", \"VD\"   => remplacé par \"QuickApp\" et \"QA\"\r\n--  \"SetrunConfigScenario\"  => remplacé par \"SetRunModeScenario\" et \"RunModeScene\"\r\n--  \"RebootHC2\"             => remplacé par \"RebootHC3\"\r\n--  \"ShutdownHC2\"           => remplacé par \"ShutdownHC3\"\r\n--  \"Alarm\"                 => en attendant le développement du QuickApp Alarm\r\n--  \"multiAlarm\"            => en attendant le développement du QuickApp multiAlarm\r\n--  \"setMode\"               => remplacé par \"ThermostatMode\"\r\n--  \"setThermostatSetpoint\" => remplacé par \"CoolingThermostatSetpoint\" et \"HeatingThermostatSetpoint\"\r\n--  \"ThermostatLevel\"\r\n--  \"ThermostatTime\"\r\n--  \"DebugMessage\"\r\n--  \"PluginScenario\"\r\n--\r\n-- Ajouté :\r\n--  \"QuickApp\"       (alias identique \"QA\")                 : {\"QuickApp\", <id_module>, <méthode>, [paramètres]}\r\n--  \"DeviceIcon\"     (alias identique \"CurrentIcon\")        : {\"CurrentIcon\", <id_module>, <no_icon>}\r\n--  \"Color\"          (alias identique \"RGB\")                : {\"Color\", <id_module>, <intensité_rouge>, <intensité_vert>, <intensité_bleu>, <intensité_blanc>}\r\n--  \"RunModeScene\"   (alias identique \"SetRunModeScenario\") : {\"RunModeScene\", <id_scene>} | {\"SetRunModeScenario\", <id_scene>, <run_valeur>} - <run_valeur> : \"manual\" | \"automatic\"\r\n--  \"isSceneRunning\" (alias identique \"RunningScene\")       : {\"isSceneRunning\", <id_scene>}\r\n--  \"ThermostatMode\"                                        : {\"ThermostatMode\", <id_thermostat>, <mode>}\r\n--  \"ThermostatFanMode\"                                     : {\"ThermostatFanMode\", <id_thermostat>, <fan>}\r\n--  \"CoolingThermostatSetpoint\"                             : {\"CoolingThermostatSetpoint\", <id_thermostat>, <valeur>}\r\n--  \"HeatingThermostatSetpoint\"                             : {\"HeatingThermostatSetpoint\", <id_thermostat>, <valeur>}\r\n--  \"Profile\"                                               : {\"Profile\", <id_profil>}\r\n--  \"RebootHC3\"                                             : {\"RebootHC3\"}\r\n--  \"SuspendHC3\"                                            : {\"SuspendHC3\"}\r\n--  \"ShutdownHC3\"                                           : {\"ShutdownHC3\"}\r\n--\r\n-- Modifié :\r\n--  \"Armed\", \"Disarmed\", \"setArmed\", \"setDisarmed\" => Utilise l'ID de la zone\r\n--\r\n-- Amélioré :\r\n--  GEA.portables = {123, \"Nokia 3310\"} : ID du mobile, ou nom du mobile\r\n--  \"Email\" : ID du mobile, ou nom de l'utilisateur : {\"Email\", <id_user>, <\"Message du mail\">, <\"Sujet du mail\">} | {\"Email\", <id_user>, <\"Message du mail\">}\r\n\r\n\r\n-- ================================================================================\r\n-- Tous ce que GEA sait faire est ici\r\n-- ================================================================================\r\n\r\n__TAG = \"QA_GEA_\" .. plugin.mainDeviceId\r\n\r\ntools = {\r\n\tversion = \"3.00\",\r\n\tisdebug = false,\r\n\t--addstyle = \"padding-left: 125px; display:inline-block; width:80%; margin-top:-18px; padding-top:-18px;\"\r\n\t--log = function(a,b,c)a=tools.tostring(a)for d,e in string.gmatch(a,\"(#spaces(%d+)#)\")do local f=\"\"for g=1,e do f=f..\".\"end;a=string.gsub(a,d,\"<span style=\\\"color:black;\\\">\"..f..\"</span>\")end;if tools.isdebug or c then fibaro.debug(__TAG, a)end end,\r\n\tlog = function(a, b, c, f)\r\n\t\ta = tools.tostring(a)\r\n\t\t--for d, e in string.gmatch(a, \"(#spaces(%d+)#)\") do\r\n\t\t\t--local f = \"\"\r\n\t\t\t--for g = 1, e do\r\n\t\t\t\t--f = f .. \".\"\r\n\t\t\t--end\r\n\t\t\t--a = string.gsub(a, d, \"<span style=\\\"color:black;\"..tools.addstyle..\"\\\">\"..f..\"</span>\")\r\n\t\t\t--a = string.gsub(a, d, \"&nbsp;\")\r\n\t\t--end\r\n\t\tif (tools.isdebug or c) and type(f) == \"function\" then\r\n\t\t\t--fibaro.debug(__TAG, \"<span style=\\\"color:\"..(b or\"white\")..\";\"..tools.addstyle..\"\\\">\"..a..\"</span>\")\r\n\t\t\tif b then\r\n\t\t\t\tf(__TAG, \"<font color=\" .. b .. \">\" .. a .. \"</font>\")\r\n\t\t\telse\r\n\t\t\t\tf(__TAG, a)\r\n\t\t\tend\r\n\t\tend\r\n\tend,\r\n\t--error = function(a,b)tools.log(a,b or\"red\",true)end,\r\n\terror = function(a,b)tools.log(a,b,true,fibaro.error)end,\r\n\t--warning = function(a,b)tools.log(a,b or\"orange\",true)end,\r\n\twarning = function(a,b)tools.log(a,b,true,fibaro.warning)end,\r\n\t--info = function(a,b)tools.log(a,b or\"white\",true)end,\r\n\tinfo = function(a,b)tools.log(a,b,true,fibaro.trace)end,\r\n\t--debug = function(a,b)tools.log(a,b or\"gray\",false)end,\r\n\tdebug = function(a,b)tools.log(a,b,false,fibaro.debug)end,\r\n\ttostring = function(h)if type(h)==\"boolean\"then if h then return\"true\"else return\"false\"end elseif type(h)==\"table\"then if json then return json.encode(h)else return\"table found\"end else return tostring(h)end end,\r\n\tsplit = function(i,j)local j,k=j or\":\",{}local l=string.format(\"([^%s]+)\",j)i:gsub(l,function(m)k[#k+1]=m end)return k end,\r\n\ttrim = function(n)return n:gsub(\"^%s*(.-)%s*$\",\"%1\")end,\r\n\tdeep_print = function(o)for g,p in pairs(o)do if type(p)==\"table\"then deep_print(p)else print(g,p)end end end,\r\n\tiif = function(q,r,s)if q then return r else return s end end,\r\n\tcut = function(t,u)u=u or 10;if u<t:len()then return t:sub(1,u-3)..\"...\"end;return t end,\r\n\tisNumber = function(v)if type(v)==\"number\"then return true end;if type(v)==\"string\"then return type(tonumber(v))==\"number\"end;return false end,\r\n\tgetStringTime = function(w)if w then return os.date(\"%H:%M:%S\")end;return os.date(\"%H:%M\")end,\r\n\ttoTime = function(x)local y,z=string.match(x,\"(%d+):(%d+)\")local A=os.date(\"*t\")local B=os.time{year=A.year,month=A.month,day=A.day,hour=y,min=z,sec=0}if B<os.time()then B=os.time{year=A.year,month=A.month,day=A.day+1,hour=y,min=z,sec=0}end;return B end,\r\n\tgetStringDate = function()return os.date(\"%d/%m/%Y\")end,\r\n\tisNil = function(C)return type(C)==\"nil\"end,\r\n\tisNotNil = function(C)return not tools.isNil(C)end,\r\n\tconvertToString = function(value)\r\n\t\tif type(value) == 'boolean' then\r\n\t\t\tif value then return '1' else return '0' end\r\n\t\telseif type(value) == 'number' then\r\n\t\t\treturn tostring(value)\r\n\t\telseif type(value) == 'table' then\r\n\t\t\treturn json.encode(value)\r\n\t\tend\r\n\t\treturn value\r\n\tend,\r\n\tgetView = function(id, name, typ)\r\n\t\tlocal function find(s)\r\n\t\t\tif type(s) == 'table' then\r\n\t\t\t\tif s.name == name then\r\n\t\t\t\t\treturn s[typ]\r\n\t\t\t\telse\r\n\t\t\t\t\tfor _,v in pairs(s) do\r\n\t\t\t\t\t\tlocal r = find(v)\r\n\t\t\t\t\t\tif r then\r\n\t\t\t\t\t\t\treturn r\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn find(api.get(\"/plugins/getView?id=\"..id)[\"$jason\"].body.sections)\r\n\tend,\r\n\tfilterEvent = function(t1, t2)\r\n\t\tlocal ty1 = type(t1)\r\n\t\tlocal ty2 = type(t2)\r\n\t\tif ty1 ~= ty2 then return false end\r\n\t\tif ty1 ~= 'table' and ty2 ~= 'table' then return t1 == t2 end\r\n\t\tfor k2,v2 in pairs(t2) do\r\n\t\t\tlocal v1 = t1[k2]\r\n\t\t\tif v1 == nil or not tools.filterEvent(v1, v2) then return false end\r\n\t\tend\r\n\t\treturn true\r\n\tend,\r\n}\r\n\r\n\r\n\r\n-- ================================================================================\r\n-- GEA Class Constructor\r\n-- ================================================================================\r\n\r\nclass \"GEA\"\r\n\r\nfunction GEA:__init(source)\r\n\t--tools.info(\"GEA:__init(\"..type(source)..\") => \" .. json.encode(source)) -- DEBUG\r\n\r\n\tself.globalvariables  = \"GEA_Tasks\"\r\n\tself.pluginsvariables = \"GEA_Plugins\"\r\n\tself.control          = true\r\n\tself.version          = \"7.10\"\r\n\tself.checkEvery       = 30                      -- durée en secondes\r\n\tself.debug            = false                   -- mode d'affiche debug on/off\r\n\tself.secureAction     = self.catchError or true -- utilise pcall() ou pas\r\n\tself.source           = source\r\n\tself.auto             = self.source.type == \"autostart\"\r\n\tself.language         = nil\r\n\tself.running          = nil\r\n\tself.globalvalue      = nil\r\n\tself.globalhisto      = nil\r\n\tself.runAt            = nil\r\n\t--self.firmware         = api.get(\"/settings/info\").currentVersion.version\r\n\tself.varenum          = false\r\n\tself.suspendvar       = \"SuspendreGEA\"\r\n\tself.refreshInterval  = 100 -- durée en millisecondes\r\n\r\n\tself.portables = {}\r\n\tself.moduleNames = {}\r\n\tself.moduleRooms = {}\r\n\tself.variables = {}\r\n\tself.plugins = {}\r\n\tself.output = nil\r\n\tself.stoppedTasks = {}\r\n\tself.history = {}\r\n\tself.historyvariable = \"GEA_History\"\r\n\tself.historymax = 5\r\n\tself.pluginsreturn = {}\r\n\tself.pluginretry = 500\r\n\tself.pluginmax = 5\r\n\tself.garbagevalues = {}\r\n\tself.usedoptions = {}\r\n\tself.event = {}\r\n\tself.declared = {}\r\n\tself.forceRefreshValues = false\r\n\tself.showRoomNames = true\r\n\tself.batteriesWithRoom = self.showRoomNames\r\n\tself.buttonIds = {}\r\n\tself.nameToId = {}\r\n\r\n\tself.traduction = {\r\n\t\ten = {\r\n\t\t\tid_missing          = \"ID : %s doesn't exists\",\r\n\t\t\tglobal_missing      = \"Global : %s doesn't exists\",\r\n\t\t\tlabel_missing       = \"Label : [%d] %s doesn't exists\",\r\n\t\t\tslider_missing      = \"Slider : [%d] %s doesn't exists\",\r\n\t\t\tnot_number          = \"%s must be a number\",\r\n\t\t\tnot_string          = \"%s must be a string\",\r\n\t\t\tfrom_missing        = \"&lt;from&gt; is mandatory\",\r\n\t\t\tvarCacheInstant     = \"VariableCache doesn't work with event instance\",\r\n\t\t\tcentral_instant     = \"CentralSceneEvent works only with event instance\",\r\n\t\t\tcentral_missing     = \"id, key et attribute are mandatory\",\r\n\t\t\tproperty_missing    = \"Property : %s can't be found\",\r\n\t\t\toption_missing      = \"Option : %s is missing\",\r\n\t\t\tnot_an_action       = \"Option : %s can't be used as an action\",\r\n\t\t\tnot_a_trigger       = \"Option : %s can't be used as a trigger\",\r\n\t\t\tnot_math_op         = \"Option : %s doesn't allow + or - operations\",\r\n\t\t\thour                = \"hour\",\r\n\t\t\thours               = \"hours\",\r\n\t\t\tandet               = \"and\",\r\n\t\t\tminute              = \"minute\",\r\n\t\t\tminutes             = \"minutes\",\r\n\t\t\tsecond              = \"second\",\r\n\t\t\tseconds             = \"seconds\",\r\n\t\t\terr_cond_missing    = \"Error : condition(s) required\",\r\n\t\t\terr_dur_missing     = \"Error : duration required\",\r\n\t\t\terr_msg_missing     = \"message required, empty string is allowed\",\r\n\t\t\tnot_an_condition    = \"Option : %s can't be used as a condition\",\r\n\t\t\tno_action           = \"< no action >\",\r\n\t\t\trepeated            = \"repeat\",\r\n\t\t\tstopped             = \"stopped\",\r\n\t\t\tmaxtime             = \"MaxTime\",\r\n\t\t\tadd_event           = \"Add immediately :\",\r\n\t\t\tadd_auto            = \"Add auto :\",\r\n\t\t\tgea_failed          = \"GEA ... STOPPED\",\r\n\t\t\tvalidate            = \"Validation\",\r\n\t\t\taction              = \"action\",\r\n\t\t\terr_check           = \"Error, check : \",\r\n\t\t\tdate_format         = \"%d.%m.%y\",\r\n\t\t\thour_format         = \"%X\",\r\n\t\t\tinput_date_format   = \"dd/mm/yyyy\",\r\n\t\t\tquit                = \"Quit\",\r\n\t\t\tgea_run_since       = \"GEA run since %s\",\r\n\t\t\tgea_check_nbr       = \"... check running #%d @%ds...\",\r\n\t\t\tgea_start           = \"Started automatically of GEA %s (mode %s)\",\r\n\t\t\tgea_start_event     = \"Started by event of GEA %s (mode %s [%s])\",\r\n\t\t\tgea_minifier        = \"Use minifiertools v. %s\",\r\n\t\t\tgea_check_every     = \"Check automatic every %s seconds\",\r\n\t\t\tgea_global_create   = \"GEA QuickApp variable : %s\",\r\n\t\t\tgea_load_usercode   = \"Loading user code setEvents() ...\",\r\n\t\t\tgea_nothing         = \"No entry to check\",\r\n\t\t\tgea_start_time      = \"GEA started on %s at %s ...\",\r\n\t\t\tgea_stopped_auto    = \"GEA has stopped running in automatic mode\",\r\n\t\t\tweek_short          = {\"mo\", \"tu\", \"we\", \"th\", \"fr\", \"sa\", \"su\"},\r\n\t\t\tweek                = {\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"},\r\n\t\t\tmonths              = {\"january\", \"febuary\", \"march\", \"april\", \"may\", \"juin\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"},\r\n\t\t\tweekend             = \"Weekend\",\r\n\t\t\tweekdays            = \"Weekdays\",\r\n\t\t\tweather             = {\"clear\", \"cloudy\", \"rain\", \"snow\", \"storm\", \"fog\"},\r\n\t\t\tsearch_plugins      = \"Searching plugins, ...\",\r\n\t\t\tplugins_none        = \"Found any\",\r\n\t\t\tplugin_not_found    = \"Plugin not found\",\r\n\t\t\tpopupinfo           = \"Information\",\r\n\t\t\tpopupsuccess        = \"Success\",\r\n\t\t\tpopupwarning        = \"Warning\",\r\n\t\t\tpopupcritical       = \"Critical\",\r\n\t\t\tmemoryused          = \"Memory used: \",\r\n\t\t\toptimization        = \"Optimization...\",\r\n\t\t\tremoveuseless       = \"Removing useless option: \",\r\n\t\t\tremoveuselesstrad   = \"Removing useless traduction: \",\r\n\t\t\tstart_entry         = \"Started\",\r\n\t\t\tno_entry_for_event  = \"No entry for this event %s, please remove it from header\",\r\n\t\t\tlocale              = \"en-US\",\r\n\t\t\texecute             = \"Démarrer\",\r\n\t\t\tname_is_missing     = \"Name isn't specified\",\r\n\t\t\troom_is_missing     = \"Room isn't specified\",\r\n\t\t\tdevice_is_missing   = \"Device \\\"<b>%s</b>\\\" unknown\",\r\n\t\t\tscene_is_missing    = \"Scene \\\"<b>%s</b>\\\" unknown\",\r\n\t\t\tpartition_missing   = \"Alarm partition \\\"<b>%s</b>\\\" unknown\",\r\n\t\t\tuser_missing        = \"User \\\"<b>%s</b>\\\" unknown\",\r\n\t\t\tprofile_missing     = \"Profile \\\"<b>%s</b>\\\" unknown\",\r\n\t\t\tinstant_trigger     = \"Event trigger: \",\r\n\t\t\tgea_suspended       = \"GEA suspended (variable : %s) ...\",\r\n\t\t\tyes                 = \"yes\",\r\n\t\t\tno                  = \"no\",\r\n\t\t},\r\n\t\tfr = {\r\n\t\t\tid_missing          = \"ID : %s n'existe(nt) pas\",\r\n\t\t\tglobal_missing      = \"Global : %s n'existe(nt) pas\",\r\n\t\t\tlabel_missing       = \"Label : [%d] %s n'existe pas\",\r\n\t\t\tslider_missing      = \"Slider : [%d] %s n'existe pas\",\r\n\t\t\tnot_number          = \"%s doit être un numéro\",\r\n\t\t\tnot_string          = \"%s doit être une chaîne de caractères\",\r\n\t\t\tfrom_missing        = \"&lt;from&gt; est obligatoire\",\r\n\t\t\tvarCacheInstant     = \"VariableCache ne fonctionne pas avec les déclenchements instantanés\",\r\n\t\t\tcentral_instant     = \"CentralSceneEvent ne fonctionne qu'avec des déclenchements instantanés\",\r\n\t\t\tcentral_missing     = \"id, key et attribute sont obligatoires\",\r\n\t\t\tproperty_missing    = \"Propriété: %s introuvable\",\r\n\t\t\toption_missing      = \"Option : %s n'existe pas\",\r\n\t\t\tnot_an_action       = \"Option : %s ne peut pas être utilisé comme action\",\r\n\t\t\tnot_a_trigger       = \"Option : %s ne peut pas être utilisé comme trigger\",\r\n\t\t\tnot_math_op         = \"Option : %s n'autorise pas les + ou -\",\r\n\t\t\thour                = \"heure\",\r\n\t\t\thours               = \"heures\",\r\n\t\t\tandet               = \"et\",\r\n\t\t\tminute              = \"minute\",\r\n\t\t\tminutes             = \"minutes\",\r\n\t\t\tsecond              = \"seconde\",\r\n\t\t\tseconds             = \"secondes\",\r\n\t\t\terr_cond_missing    = \"Erreur : condition(s) requise(s)\",\r\n\t\t\terr_dur_missing     = \"Erreur : durée requise\",\r\n\t\t\terr_msg_missing     = \"message requis, chaîne vide autorisée\",\r\n\t\t\tnot_an_condition    = \"Option : %s ne peut pas être utilisé comme une condition\",\r\n\t\t\tno_action           = \"< pas d'action >\",\r\n\t\t\trepeated            = \"répété\",\r\n\t\t\tstopped             = \"stoppé\",\r\n\t\t\tmaxtime             = \"MaxTime\",\r\n\t\t\tadd_event           = \"Ajout immédiat :\",\r\n\t\t\tadd_auto            = \"Ajout auto :\",\r\n\t\t\tgea_failed          = \"GEA ... ARRETE\",\r\n\t\t\tvalidate            = \"Validation\",\r\n\t\t\taction              = \"action\",\r\n\t\t\terr_check           = \"Erreur, vérifier : \",\r\n\t\t\tdate_format         = \"%d.%m.%y\",\r\n\t\t\thour_format         = \"%X\",\r\n\t\t\tinput_date_format   = \"dd/mm/yyyy\",\r\n\t\t\tquit                = \"Quitter\",\r\n\t\t\tgea_run_since       = \"GEA fonctionne depuis %s\",\r\n\t\t\tgea_check_nbr       = \"... vérification en cours #%d @%ds...\",\r\n\t\t\tgea_start           = \"Démarrage automatique de GEA %s (mode %s)\",\r\n\t\t\tgea_start_event     = \"Démarrage par événement de GEA %s (mode %s [%s])\",\r\n\t\t\tgea_minifier        = \"Utilisation de minifiertools v. %s\",\r\n\t\t\tgea_check_every     = \"Vérification automatique toutes les %s secondes\",\r\n\t\t\tgea_global_create   = \"Variable QuickApp GEA : %s\",\r\n\t\t\tgea_load_usercode   = \"Chargement du code utilisateur setEvents() ...\",\r\n\t\t\tgea_nothing         = \"Aucun traitement à effectuer\",\r\n\t\t\tgea_start_time      = \"GEA a démarré le %s à %s ...\",\r\n\t\t\tgea_stopped_auto    = \"GEA est arrêté en mode automatique\",\r\n\t\t\tweek_short          = {\"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\", \"di\"},\r\n\t\t\tweek                = {\"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\", \"dimanche\"},\r\n\t\t\tmonths              = {\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\"},\r\n\t\t\tweekend             = \"Weekend\",\r\n\t\t\tweekdays            = \"Semaine\",\r\n\t\t\tweather             = {\"dégagé\", \"nuageux\", \"pluvieux\", \"neigeux\", \"orageux\", \"brouillard\"},\r\n\t\t\tsearch_plugins      = \"Recherche de plugins, ...\",\r\n\t\t\tplugins_none        = \"Aucun plugin trouvé\",\r\n\t\t\tplugin_not_found    = \"Plugin inexistant\",\r\n\t\t\tpopupinfo           = \"Information\",\r\n\t\t\tpopupsuccess        = \"Succès\",\r\n\t\t\tpopupwarning        = \"Attention appelée\",\r\n\t\t\tpopupcritical       = \"Erreur Critique\",\r\n\t\t\tmemoryused          = \"Mémoire utilisée : \",\r\n\t\t\toptimization        = \"Optimisation en cours ...\",\r\n\t\t\tremoveuseless       = \"Suppression d'option inutile : \",\r\n\t\t\tremoveuselesstrad   = \"Suppression de traduction inutile : \",\r\n\t\t\tstart_entry         = \"Démarrage\",\r\n\t\t\tno_entry_for_event  = \"Aucune entrée pour l'événement %s, supprimer le de l'entête\",\r\n\t\t\tlocale              = \"fr-FR\",\r\n\t\t\texecute             = \"Execute\",\r\n\t\t\tname_is_missing     = \"Nom inconnu\",\r\n\t\t\troom_is_missing     = \"Pièce inconnue\",\r\n\t\t\tdevice_is_missing   = \"Module \\\"<b>%s</b>\\\" inconnu\",\r\n\t\t\tscene_is_missing    = \"Scène \\\"<b>%s</b>\\\" inconnue\",\r\n\t\t\tpartition_missing   = \"Partition d'alarme \\\"<b>%s</b>\\\" inconnue\",\r\n\t\t\tuser_missing        = \"Utilisateur \\\"<b>%s</b>\\\" inconnu\",\r\n\t\t\tprofile_missing     = \"Profil \\\"<b>%s</b>\\\" inconnu\",\r\n\t\t\tinstant_trigger     = \"Déclencheur instantané : \",\r\n\t\t\tgea_suspended       = \"GEA suspendu (variable : %s) ...\",\r\n\t\t\tyes                 = \"oui\",\r\n\t\t\tno                  = \"non\",\r\n\t\t}\r\n\t}\r\n\r\n\t-- --------------------------------------------------------------------------------\r\n\t-- Déclaration de toutes les fonctions de GEA\r\n\t--   f    = {name = \"Nouvelle fonction\",\r\n\t--                math       = true, -- autorise les + et -\r\n\t--                keepValues = true, -- ne traduit pas les sous-table {\"TurnOn\", 73} reste ainsi et non pas true ou false\r\n\t--                control    = function(name,value) if (...) then return true else return false, \"Message d'erreur\" end end,\r\n\t--                getValue   = function(name) return <la valeur> end,\r\n\t--                action     = function(name,value) <effectuer l'action> end,\r\n\t--                trigger    = function(id) return {event = {}, filter = {}} end,\r\n\t--                isBoolean  = true, -- ne compare pas le résultat\r\n\t--          },\r\n\t-- --------------------------------------------------------------------------------\r\n\tself.options = {\r\n\t\tnumber    = {name = \"ID\",\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) if type(id) ~= \"table\" then id = {id} end local res, msg = true, \"\" for i=1, #id do if not self:getName(self:findDeviceId(id[i]), self.showRoomNames) then res = false msg = msg .. self:findDeviceId(id[i]) .. \" \" end end return res, string.format(self.trad.id_missing, msg) end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id) return tonumber(fibaro.getValue(self:findDeviceId(id), \"value\")) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"value\") end, -- Lazer : suppression du tonumber()\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tboolean   = {name = \"Boolean\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(bool) return bool end,\r\n\t\t},\r\n\t\tglobal    = {name = \"Global\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true, -- autorise les Global+ et Global-\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(name) if type(name) ~= \"table\" then name = {name} end local res, msg = true, \"\" for i=1, #name do if not self:getGlobalValue(name[i]) then res = false msg = msg .. name[i] .. \" \" end end return res, string.format(self.trad.global_missing, msg) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(name) return self:getGlobalValue(name) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(name, value) if type(name) ~= \"table\" then name = {name} end for i=1, #name do fibaro.setGlobalVariable(name[i], self:getMessage(self:incdec(value, self.options.global.getValue(name[i])))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(name) return {event = {type = \"global-variable\", name = name}, filter = {type = \"GlobalVariableChangedEvent\", data = {variableName = name}}} end,\r\n\t\t},\r\n\t\tvalue     = {name = \"Value\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true, -- autorise les Value+ et Value-\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) if not id then id = self.currentMainId end return fibaro.getValue(self:findDeviceId(id), \"value\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if not value then value = id id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"setValue\",self:incdec(value, self.options.value.getValue(self:findDeviceId(id[i])))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tvalue2    = {name = \"Value2\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.value.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) if not id then id = self.currentMainId end return fibaro.getValue(id, \"value2\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if not value then value = id id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"setValue2\",self:incdec(value, self.options.value2.getValue(self:findDeviceId(id[i])))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value2\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value2\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tproperty  = {name = \"Property\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id, property) return fibaro.getValue(self:findDeviceId(id), property) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, property, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setProperty\", property, self:getMessage(self:incdec(value, self.options.property.getValue(self:findDeviceId(id[i]), property)))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id, property) return {event = {type = \"device\", id = self:findDeviceId(id), property = property}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = property}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tturnon    = {name = \"TurnOn\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) if not id then id = self.currentMainId end return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id) if (not id) then id = self.currentMainId end  return tonumber(fibaro.getValue(self:findDeviceId(id), \"value\"))>0 end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) if not id then id = self.currentMainId end local val = fibaro.getValue(self:findDeviceId(id), \"value\") return type(val)==\"boolean\" and val or type(val)==\"number\" and val>0 or type(val)==\"string\" and val~=\"\" or false end, -- Lazer : suppression tonumber\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id, duree) if not id then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"turnOn\") end if duree then setTimeout(function() for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"turnOff\") end end, self:getDuree(duree) * 1000) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value\"}, sourceType = \"system\"}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tturnoff   = {name = \"TurnOff\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) if not id then id = self.currentMainId end return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id) if (not id) then id = self.currentMainId end return tonumber(fibaro.getValue(self:findDeviceId(id), \"value\"))==0 end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) if not id then id = self.currentMainId end local val = fibaro.getValue(self:findDeviceId(id), \"value\") return not(type(val)==\"boolean\" and val or type(val)==\"number\" and val>0 or type(val)==\"string\" and val~=\"\" or false) end, -- Lazer : suppression tonumber\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id, duree) if not id then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"turnOff\") end if duree then setTimeout(function() for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"turnOn\") end end, self:getDuree(duree) * 1000) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value\"}, sourceType = \"system\"}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tswitch    = {name = \"Switch\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) if not id then id = self.currentMainId end return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id) if (not id) then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do if (tonumber(fibaro.getValue(self:findDeviceId(id[i]), \"value\"))>0) then fibaro.call(self:findDeviceId(id[i]),\"turnOff\") else fibaro.call(self:findDeviceId(id[i]),\"turnOn\") end end end\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id) if not id then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do local val = fibaro.getValue(self:findDeviceId(id[i]), \"value\") if type(val)==\"boolean\" and val or type(val)==\"number\" and val>0 or false then fibaro.call(self:findDeviceId(id[i]),\"turnOff\") else fibaro.call(self:findDeviceId(id[i]),\"turnOn\") end end end, -- Lazer : suppression tonumber\r\n\t\t},\r\n--[[\r\n    armed     = {name=\"Armed\",\r\n                    optimize = true,\r\n                    control = function(id) if (not id) then id = self.currentMainId end return self.options.number.control(id) end,\r\n                    getValue = function(id) if (not id) then id = self.currentMainId end return tonumber(fibaro.getValue(self:findDeviceId(id), \"armed\"))==1 end,\r\n                },\r\n    disarmed  = {name=\"Disarmed\",\r\n                    optimize = true,\r\n                    control = function(id) if (not id) then id = self.currentMainId end return self.options.number.control(id) end,\r\n                    getValue = function(id) if (not id) then id = self.currentMainId end return tonumber(fibaro.getValue(self:findDeviceId(id), \"armed\"))==0 end,\r\n                },\r\n    setarmed     = {name=\"setArmed\",\r\n                    optimize = true,\r\n                    control = function(id) if (not id) then id = self.currentMainId end return self.options.number.control(id) end,\r\n                    getValue = function(id) if (not id) then id = self.currentMainId end return tonumber(fibaro.getValue(self:findDeviceId(id), \"armed\"))==1 end,\r\n                    action=function(id) if (not id) then id = self.currentMainId end if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"setArmed\", 1) end end\r\n                },\r\n    setdisarmed  = {name=\"setDisarmed\",\r\n                    optimize = true,\r\n                    control = function(id) if (not id) then id = self.currentMainId end return self.options.number.control(id) end,\r\n                    getValue = function(id) if (not id) then id = self.currentMainId end return tonumber(fibaro.getValue(self:findDeviceId(id), \"armed\"))==0 end,\r\n                    action=function(id) if (not id) then id = self.currentMainId end if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]),\"setArmed\", 0) end end\r\n                },\r\n--]]\r\n\t\tarmed     = {name = \"Armed\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\t--control   = function(id) return api.get(\"/alarms/v1/partitions/\" .. self:findAlarmId(id)) and true or false, string.format(self.trad.partition_missing, tostring(id)) end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue  = function(id) return api.get(\"/alarms/v1/partitions/\" .. self:findAlarmId(id)).armed end,\r\n\t\t\t\t\t\t\t\t\t\t--trigger   = function(id) return {event = {type = \"alarm\", id = self:findAlarmId(id), property = \"armed\"}, filter = {type = \"AlarmPartitionArmedEvent\", data = {partitionId = self:findAlarmId(id), armed = true}}} end,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return api.get(\"/alarms/v1/partitions/\" .. tostring(id)) and true or false, string.format(self.trad.partition_missing, tostring(id)) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return api.get(\"/alarms/v1/partitions/\" .. id).armed end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"alarm\", id = tonumber(id), property = \"armed\"}, filter = {type = \"AlarmPartitionArmedEvent\", data = {partitionId = tonumber(id), armed = true}}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdisarmed  = {name = \"Disarmed\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return api.get(\"/alarms/v1/partitions/\" .. tostring(id)) and true or false, string.format(self.trad.partition_missing, tostring(id)) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return not api.get(\"/alarms/v1/partitions/\" .. id).armed end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"alarm\", id = tonumber(id), property = \"armed\"}, filter = {type = \"AlarmPartitionArmedEvent\", data = {partitionId = tonumber(id), armed = false}}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tsetarmed  = {name = \"setArmed\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) if type(id) ~= \"table\" then id = {id} end local res, msg = true, \"\" for i=1, #id do if not api.get(\"/alarms/v1/partitions/\" .. id) then res = false msg = msg .. tostring(id[i]) .. \" \" end end return res, string.format(self.trad.partition_missing, msg) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id) if type(id) ~= \"table\" then id = {id} end for i=1, #id do api.post(\"/alarms/v1/partitions/\" .. id[i] .. \"/actions/arm\") end end,\r\n\t\t},\r\n\t\tsetdisarmed = {name = \"setDisarmed\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) if type(id) ~= \"table\" then id = {id} end local res, msg = true, \"\" for i=1, #id do if not api.get(\"/alarms/v1/partitions/\" .. id) then res = false msg = msg .. tostring(id[i]) .. \" \" end end return res, string.format(self.trad.partition_missing, msg) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id) if type(id) ~= \"table\" then id = {id} end for i=1, #id do api.delete(\"/alarms/v1/partitions/\" .. id[i] .. \"/actions/arm\") end end,\r\n\t\t},\r\n\t\tsensor    = {name = \"Sensor\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) if not id then id = self.currentMainId end return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) if not id then id = self.currentMainId end return fibaro.getValue(self:findDeviceId(id), \"power\") end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"power\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"power\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n    --virtualdevice = {name=\"VirtualDevice\",\r\n                    --optimize = true,\r\n                    --control = function(id, button) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do local check, message = self.options.number.control(self:findButtonId(self:findDeviceId(id[i]), button)) if (check) then return tools.isNumber(self:findButtonId(self:findDeviceId(id[i]), button)), string.format(self.trad.not_number, button) else return check, message end end end,\r\n                    --action=function(id, button) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do local currId = self:findDeviceId(id[i]) fibaro.call(currId, \"pressButton\", tostring(self:findButtonId(currId, button))) end end\r\n                --},\r\n\t\tquickapp  = {name = \"QuickApp\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id, method) if type(id) ~= \"table\" then id = {id} end for i=1, #id do local check, message = self.options.number.control(self:findDeviceId(id[i])) if check then return type(method) == \"string\", string.format(self.trad.not_string, method) else return check, message end end end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, method, ...) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), method, table.unpack({...})) end end,\r\n\t\t},\r\n\t\tlabel     = {name = \"Label\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id, property) if not self.options.checklabel.getValue(id, property) then return false, string.format(self.trad.label_missing, id, property) else return true end end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id, property) return fibaro.getValue(self:findDeviceId(id), \"ui.\"..property:gsub(\"ui.\", \"\"):gsub(\".value\", \"\")..\".value\") end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id, property) return tools.getView(self:findDeviceId(id), property, \"text\") end, -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id, property, value) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setProperty\", \"ui.\"..property..\".value\", self:getMessage(self:incdec(value, self.options.label.getValue(self:findDeviceId(id[i]), property)))) end end\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, property, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"updateView\", property, \"text\", self:getMessage(self:incdec(value, self.options.label.getValue(self:findDeviceId(id[i]), property)))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id, property) return {event = {type = \"device\", id = self:findDeviceId(id), propertyName = \"text\", componentName = property}, filter = {type = \"PluginChangedViewEvent\", data = {deviceId = self:findDeviceId(id), propertyName = \"text\", componentName = property}}} end,\r\n\t\t},\r\n\t\ttime      = {name = \"Time\",\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(from) if from and from:len()>0 then return true else return false, self.trad.from_missing end end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(from, to) if not to then to = from end if not to then return os.date(self.trad.hour_format, self.runAt) end return self:checkTime(from, to) end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdays      = {name = \"Days\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(days) return self:checkDays(days) end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdates     = {name = \"Dates\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(from) if from and from:len()>0 then return true else return false, self.trad.from_missing end end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(from, to) return self:checkDates(from, to) end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdst       = {name = \"DST\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function() return os.date(\"*t\", self.runAt).isdst end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tnodst     = {name = \"NODST\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function() return not os.date(\"*t\", self.runAt).isdst end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tweather   = {name = \"Weather\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(property, value) if not value then value = property property = nil if not property or property==\"\" then property = \"WeatherCondition\" end end return fibaro.getValue(3, property) end,\r\n\t\t},\r\n\t\tweatherlocal = {name = \"WeatherLocal\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends  = {\"weather\"},\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(property) return self:translatetrad(\"weather\", self:getOption({\"Weather\", property}).getValue()) end,\r\n\t\t},\r\n\t\tbattery   = {name = \"Battery\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), 'batteryLevel') end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"batteryLevel\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"batteryLevel\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tbatteries = {name = \"Batteries\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(value) return self:batteries(value) end,\r\n\t\t\t\t\t\t\t\t\t\tgetName   = function(value) local _, names, _ = self:batteries(value, self.batteriesWithRoom) return names end,\r\n\t\t\t\t\t\t\t\t\t\tgetRoom   = function(value) local _, _, rooms = self:batteries(value, self.batteriesWithRoom) return rooms end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdead      = {name = \"Dead\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return fibaro.getValue(self:findDeviceId(id), \"dead\") end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(1, \"wakeUpAllDevices\", self:findDeviceId(id[i])) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"dead\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"dead\"}, sourceType = \"system\"}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdeads     = {name = \"Deads\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function() local devices = api.get(\"/devices?property=[dead,true]&enabled=true\") return #devices>0, #devices end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function() local devices = api.get(\"/devices?property=[dead,true]&enabled=true\") for _, v in pairs(devices) do fibaro.call(1, \"wakeUpAllDevices\", v.id) end end,\r\n\t\t\t\t\t\t\t\t\t\tgetName   = function() return \"\" end,\r\n\t\t\t\t\t\t\t\t\t\tgetRoom   = function() return \"\" end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tsceneactivation = {name = \"SceneActivation\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id, value) return tonumber(fibaro.getValue(self:findDeviceId(id), \"sceneActivation\")) == tonumber(value) end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"sceneActivation\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"sceneActivation\"}}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tfonction  = {name = \"Function\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(func) return func() end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(func) self.forceRefreshValues = true func() end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tcopyglobal = {name = \"CopyGlobal\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(source, destination) return self.options.global.control({source, destination}) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(source, destination) fibaro.setGlobalVariable(destination, self:getGlobalValue(source)) end,\r\n\t\t},\r\n\t\tportable  = {name = \"Portable\",\r\n\t\t\t\t\t\t\t\t\t\taction = function(id, message) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findMobileId(id[i]), \"sendPush\", self:getMessage(message)) end end,\r\n\t\t},\r\n\t\temail     = {name = \"Email\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, message, sujet) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findUserId(id[i]), \"sendEmail\", sujet or (\"GEA \" .. self.version), self:getMessage(message)) end end,\r\n\t\t},\r\n\t\tcurrenticon = {name = \"CurrentIcon\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"deviceIcon\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setProperty\", \"deviceIcon\", value) end end,\r\n\t\t},\r\n\t\tscenario  = {name = \"Scenario\",\r\n\t\t\t\t\t\t\t\t\t\tkeepValues = true,\r\n\t\t\t\t\t\t\t\t\t\t--control = function(id) return type(fibaro:isSceneEnabled(self:findScenarioId(id))) ~= nil end,\r\n\t\t\t\t\t\t\t\t\t\tcontrol    = function(id) return api.get(\"/scenes/\"..self:findScenarioId(id)) and true or false end, -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id, args) if (type(id) ~= \"table\") then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\t--for i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\t--if (type(args) == \"table\") then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t----print(\"Arguments : \", json.encode(args))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t----local arguments = json.encode(args)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t----print(\"GetMessage : \", self:getMessage(arguments))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t--fibaro.startScene(self:findScenarioId(id[i]), args)\r\n\t\t\t\t\t\t\t\t\t\t\t\t--else\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t--fibaro:startScene(self:findScenarioId(id[i]))\r\n\t\t\t\t\t\t\t\t\t\t\t\t--end\r\n\t\t\t\t\t\t\t\t\t\t\t--end\r\n\t\t\t\t\t\t\t\t\t\t--end\r\n\t\t\t\t\t\t\t\t\t\taction = function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\tfibaro.scene(\"execute\", {self:findScenarioId(id[i])})\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend, -- Lazer\r\n\t\t},\r\n\t\tkill      = {name = \"Kill\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.scenario.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro:killScenes(self:findScenarioId(id[i])) end end\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.scene(\"kill\", {self:findScenarioId(id[i])}) end end, -- Lazer\r\n\t\t},\r\n\t\tpicture   = {name = \"Picture\",\r\n\t\t\t\t\t\t\t\t\t\toptimize   = true,\r\n\t\t\t\t\t\t\t\t\t\tkeepValues = true,\r\n\t\t\t\t\t\t\t\t\t\taction     = function(id, destinataire) if type(id) ~= \"table\" then id = {id} end if type(destinataire) ~= \"table\" then destinataire = {destinataire} end for i=1, #id do for j =1, #destinataire do fibaro.call(self:findDeviceId(id[i]), \"sendPhotoToUser\", destinataire[j]) end end end\r\n\t\t},\r\n\t\tpicturetoemail = {name = \"PictureToEmail\",\r\n\t\t\t\t\t\t\t\t\t\toptimize   = true,\r\n\t\t\t\t\t\t\t\t\t\tkeepValues = true,\r\n\t\t\t\t\t\t\t\t\t\taction     = function(id, destinataire) if type(id) ~= \"table\" then id = {id} end if type(destinataire) ~= \"table\" then destinataire = {destinataire} end for i=1, #id do for j =1, #destinataire do fibaro.call(self:findDeviceId(id[i]), \"sendPhotoToEmail\", destinataire[j]) end end end\r\n\t\t},\r\n\t\topen      = {name = \"Open\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends  = {\"value\"},\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return math.abs(-100+tonumber(self.options.value.getValue(self:findDeviceId(id)))) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if not id then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end if not value then value = 100 end for i=1, #id do self.options.value.action(self:findDeviceId(id[i]), value) end  end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tclose     = {name = \"Close\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends  = {\"value\"},\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return self.options.value.getValue(self:findDeviceId(id)) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if not id then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end if not value then value = 100 end for i=1, #id do self.options.value.action(self:findDeviceId(id[i]), math.abs(-100+value)) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"value\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"value\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tstop      = {name = \"Stop\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"stop\") end end,\r\n\t\t},\r\n\t\tapipost   = {name = \"ApiPost\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(url, data) __assert_type(data, \"table\") return api.post(url, data) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(url, data) __assert_type(data, \"table\") api.post(url, data) end,\r\n\t\t},\r\n\t\tapiput    = {name = \"ApiPost\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(url, data) __assert_type(data, \"table\") return api.put(url, data) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(url, data) __assert_type(data, \"table\") api.put(url, data) end,\r\n\t\t},\r\n\t\tapiget    = {name = \"ApiGet\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(url) return api.get(url) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(url) api.get(url) end,\r\n\t\t},\r\n\t\tprogram   = {name = \"Program\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"currentProgram\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, prog) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"startProgram\", prog) end end,\r\n\t\t},\r\n--[[\r\n\t\tthermostatlevel = {name = \"ThermostatLevel\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"value\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setTargetLevel\", tostring(self:incdec(value, self.options.thermostatlevel.getValue(self:findDeviceId(id[i]))))) end end,\r\n\t\t},\r\n\t\tthermostattime = {name = \"ThermostatTime\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.thermostatlevel.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"timestamp\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setTime\", tonumber(os.time()) + value) end end,\r\n\t\t},\r\n\t\tsetmode   = {name = \"setMode\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, mode) return fibaro.call(self:findDeviceId(id), \"setMode\", mode) end,\r\n\t\t},\r\n\t\tsetthermostatsetpoint = {name = \"setThermostatSetpoint\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, mode, value) return fibaro.call(self:findDeviceId(id), \"setThermostatSetpoint\", mode, value) end,\r\n\t\t},\r\n--]]\r\n\t\tthermostatmode = {name = \"ThermostatMode\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"thermostatMode\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, mode) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setThermostatMode\", mode) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"thermostatMode\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"thermostatMode\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tthermostatfanmode = {name = \"ThermostatFanMode\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"thermostatFanMode\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, fan) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setThermostatFanMode\", fan) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"thermostatFanMode\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"thermostatFanMode\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\tcoolingthermostatsetpoint = {name = \"CoolingThermostatSetpoint\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"coolingThermostatSetpoint\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setCoolingThermostatSetpoint\", self:incdec(value, self.options.coolingthermostatsetpoint.getValue(self:findDeviceId(id[i])))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"coolingThermostatSetpoint\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"coolingThermostatSetpoint\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\theatingthermostatsetpoint = {name = \"HeatingThermostatSetpoint\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return fibaro.getValue(self:findDeviceId(id), \"heatingThermostatSetpoint\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, value) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setHeatingThermostatSetpoint\", self:incdec(value, self.options.heatingthermostatsetpoint.getValue(self:findDeviceId(id[i])))) end end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger  = function(id) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"heatingThermostatSetpoint\"}, filter = {type = \"DevicePropertyUpdatedEvent\", data = {id = self:findDeviceId(id), property = \"heatingThermostatSetpoint\"}, sourceType = \"system\"}} end,\r\n\t\t},\r\n\t\t--  \"SetThermostat\" : {\"SetThermostat\", <id_thermostat>, <mode>, <valeur>, <fan>}\r\n\t\tsetthermostat = {name = \"SetThermostat\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends  = {\"thermostatmode\", \"thermostatfanmode\", \"coolingthermostatsetpoint\", \"heatingthermostatsetpoint\"},\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, mode, value, fan)\r\n\t\t\t\t\t\t\t\t\t\t\tself.options.thermostatmode.action(id, mode)\r\n\t\t\t\t\t\t\t\t\t\t\tif mode == \"Off\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tif mode == \"Heat\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.options.heatingthermostatsetpoint.action(id, value)\r\n\t\t\t\t\t\t\t\t\t\t\telseif mode == \"Cool\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.options.coolingthermostatsetpoint.action(id, value)\r\n\t\t\t\t\t\t\t\t\t\t\telseif mode == \"Auto\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.options.heatingthermostatsetpoint.action(id, value)\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.options.coolingthermostatsetpoint.action(id, value)\r\n\t\t\t\t\t\t\t\t\t\t\telseif mode == \"Resume\" then\r\n\t\t\t\t\t\t\t\t\t\t\telseif mode == \"Fan\" then\r\n\t\t\t\t\t\t\t\t\t\t\telseif mode == \"Dry\" then\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tif fan then\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.options.thermostatfanmode.action(id, fan)\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\task       = {name = \"Ask\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, message, scene)\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tif not scene then scene = message message = self:getMessage() end\r\n\t\t\t\t\t\t\t\t\t\t\tapi.post('/mobile/push', {[\"mobileDevices\"]=id,[\"message\"]=self:getMessage(message),[\"title\"]='HC3 Fibaro',[\"category\"]='YES_NO',[\"data\"]={[\"sceneId\"]=scene}})\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\trepe_t    = {name = \"Repeat\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function() return true end,\r\n\t\t},\r\n\t\tnotstart  = {name = \"NotStart\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function() return true end,\r\n\t\t},\r\n\t\tinverse   = {name = \"Inverse\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function() return true end,\r\n\t\t},\r\n\t\tmaxtime   = {name = \"Maxtime\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(taskid) return self.globalvalue:match(\"|M_\" .. taskid .. \"{(%d+)}|\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(taskid, number) if number == 0 then self.options.stoptask.action(taskid) else self.globalvalue = self.globalvalue:gsub(\"|M_\" .. taskid .. \"{(%d+)}|\", \"\") .. \"|M_\" .. taskid .. \"{\"..number..\"}|\" end end,\r\n\t\t},\r\n\t\trestarttask = {name = \"RestartTask\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(taskid) return self.globalvalue:find(\"|R_\" .. taskid..\"|\") end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(taskid) if type(taskid) ~= \"table\" then taskid = {taskid} end for i=1, #taskid do if taskid[i]==\"self\" then taskid[i]=self.currentEntry.id end self.globalvalue = self.globalvalue:gsub(\"|R_\" .. taskid[i]..\"|\", \"\"):gsub(\"|M_\" .. taskid[i] .. \"{(%d+)}|\", \"\"):gsub(\"|S_\" .. taskid[i]..\"|\", \"\") .. \"|R_\" .. taskid[i]..\"|\" end end,\r\n\t\t},\r\n\t\tstoptask  = {name = \"StopTask\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(taskid) return self.globalvalue:find(\"|S_\" .. taskid) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(taskid) if type(taskid) ~= \"table\" then taskid = {taskid} end for i=1, #taskid do if taskid[i]==\"self\" then taskid[i]=self.currentEntry.id end self.globalvalue = self.globalvalue:gsub(\"|S_\" .. taskid[i]..\"|\", \"\"):gsub(\"|M_\" .. taskid[i] .. \"{(%d+)}|\", \"\"):gsub(\"|R_\" .. taskid[i]..\"|\", \"\") .. \"|S_\" .. taskid[i]..\"|\" end end,\r\n\t\t},\r\n\t\tdepend    = {name = \"Depend\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(entryId) return type(self:findEntry(entryId)) ~= \"nil\" end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(entryId) return not self.currentEntry.isWaiting[entryId] end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\ttest      = {name = \"Test\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(name1, name2, name3) print(\"test getValue() \") return name1 .. name2 .. name3, name1 end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(name) print(\"test action() \" .. self:getMessage(name)) end,\r\n\t\t},\r\n\t\tsleep     = {name = \"Sleep\",\r\n\t\t\t\t\t\t\t\t\t\tcontrol    = function(duree, option) return type(duree)==\"number\" and type(self:getOption(option, true)~=\"nil\") end,\r\n\t\t\t\t\t\t\t\t\t\tkeepValues = true,\r\n\t\t\t\t\t\t\t\t\t\taction     = function(duree, option) local o = self:getOption(option) if duree and o then setTimeout(function() self.currentAction.name = o.name o.action(true) end, self:getDuree(duree)*1000) end end,\r\n\t\t},\r\n\t\tvariablecache = {name = \"VariableCache\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function() return self.currentEntry.getDuration() >= 0, self.trad.varCacheInstant end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(var) return self.variables[var] end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(var, value) self.variables[var] = self:getMessage(self:incdec(value, self.variables[var])) end,\r\n\t\t},\r\n\t\tenablescenario = {name = \"EnableScenario\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.scenario.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id) return fibaro:isSceneEnabled(self:findScenarioId(id)) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return api.get(\"/scenes/\"..self:findScenarioId(id)).enabled end, -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro:setSceneEnabled(self:findScenarioId(id[i]), true) end end\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id) -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal url = \"/scenes/\"..self:findScenarioId(id[i])\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal scene = api.get(url)\r\n\t\t\t\t\t\t\t\t\t\t\t\tscene.enabled = true\r\n\t\t\t\t\t\t\t\t\t\t\t\tapi.put(url, scene)\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tdisablescenario = {name = \"DisableScenario\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.scenario.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id) return not fibaro:isSceneEnabled(self:findScenarioId(id)) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return not api.get(\"/scenes/\"..self:findScenarioId(id)).enabled end, -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro:setSceneEnabled(self:findScenarioId(id[i]), false) end end\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id) -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal url = \"/scenes/\"..self:findScenarioId(id[i])\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal scene = api.get(url)\r\n\t\t\t\t\t\t\t\t\t\t\t\tscene.enabled = false\r\n\t\t\t\t\t\t\t\t\t\t\t\tapi.put(url, scene)\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tsetrunmodescenario = {name = \"SetRunModeScenario\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.scenario.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) return api.get(\"/scenes/\"..self:findScenarioId(id)).mode end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, runmode)\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal url = \"/scenes/\"..self:findScenarioId(id[i])\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal scene = api.get(url)\r\n\t\t\t\t\t\t\t\t\t\t\t\tscene.mode = runmode\r\n\t\t\t\t\t\t\t\t\t\t\t\tapi.put(url, scene)\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n--[[\r\n    setrunconfigscenario = {name=\"SetrunConfigScenario\",\r\n                    optimize = true,\r\n                    control = function(id) return self.options.scenario.control(id) end,\r\n                    getValue = function(id) return fibaro:getSceneRunConfig(self:findScenarioId(id)) end,\r\n                    action=function(id, runconfig) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro:setSceneRunConfig(self:findScenarioId(id[i]), runconfig) end end\r\n                },\r\n--]]\t\t\t\t\t\t\t\t\r\n\t\tcountscenes = {name = \"CountScenes\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.scenario.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id) if api.get(\"/scenes/\"..self:findScenarioId(id)).isRunning == true then return 1 else return 0 end end,\r\n\t\t},\r\n\t\trunningscene = {name = \"RunningScene\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.scenario.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return api.get(\"/scenes/\"..self:findScenarioId(id)).isRunning end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tpopup     = {name = \"Popup\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(typepopup, titlepopup, msgpopup, sceneID)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal content = tools.tostring(self.trad.popupinfo)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal scene = sceneID or 0\r\n\t\t\t\t\t\t\t\t\t\t\tif typepopup==\"Success\" then content = tools.tostring(self.trad.popupsuccess) elseif typepopup==\"Warning\" then content = tools.tostring(self.trad.popupwarning) elseif typepopup==\"Critical\" then content = tools.tostring(self.trad.popupcritical) end\r\n\t\t\t\t\t\t\t\t\t\t\tlocal boutons = {{caption=self.trad.quit,sceneId=0}}\r\n\t\t\t\t\t\t\t\t\t\t\tif scene ~= 0 then\r\n\t\t\t\t\t\t\t\t\t\t\t\ttable.insert(boutons, 1, {caption=self.trad.execute, sceneId=scene})\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tHomeCenter.PopupService.publish({title=\"GEA - \"..titlepopup,subtitle = os.date(self.trad.date_format .. \" - \" .. self.trad.hour_format),contentTitle = tools.tostring(content),contentBody=self:getMessage(msgpopup),img=\"..img/topDashboard/info.png\",type=tools.tostring(typepopup),buttons=boutons})\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n    --debugmessage = {name=\"DebugMessage\",\r\n                    --optimize = true,\r\n                    --control = function(id) return self.options.number.control(id) end,\r\n                    --action=function(id, elementid, msgdebug, typedebug) if (type(id) ~= \"table\") then id = {id} end for i=1, #id do fibaro.call(id[i], \"addDebugMessage\", elementid, self:getMessage(msgdebug), typedebug or debug) end end\r\n                --}, -- /api/debugMessages\r\n\t\tfilters   = {name = \"Filters\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\t--control = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(typefilter,choicefilter) if typefilter:lower() == \"lights\" then for _,v in ipairs(fibaro.getDevicesID({properties = {isLight = true}})) do fibaro.call(v, choicefilter) end elseif typefilter:lower() ==\"blinds\" then for _,v in ipairs(fibaro.getDevicesID({type = tools.tostring(\"com.fibaro.FGRM222\")})) do fibaro.call(v, choicefilter) end end end,\r\n\t\t},\r\n\t\trgb       = {name = \"RGB\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, r, g, b, w) if type(id) ~= \"table\" then id = {id} end for i=1, #id do fibaro.call(self:findDeviceId(id[i]), \"setColor\", r or 0, g or 0, b or 0, w or 0) end end,\r\n\t\t},\r\n\t\tcentralsceneevent = {name = \"CentralSceneEvent\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id, key, attribute)\r\n\t\t\t\t\t\t\t\t\t\t\tif self.currentEntry.getDuration() > -1 then return false, self.trad.central_instant end\r\n\t\t\t\t\t\t\t\t\t\t\treturn self.options.number.control(id) and type(key)~=\"nil\" and type(attribute)~=\"nil\", self.trad.central_missing\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id, key, attribute) return (self.source.event.data.deviceId==tonumber(self:findDeviceId(id)) and tostring(self.source.event.data.keyId)==tostring(key) and tostring(self.source.event.data.keyAttribute)==tostring(attribute)) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id, key, attribute) return self.source.id==tonumber(self:findDeviceId(id)) and tostring(self.source.value.keyId)==tostring(key) and tostring(self.source.value.keyAttribute)==tostring(attribute) end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id, key, attribute) return {event = {type = \"device\", id = self:findDeviceId(id), property = \"centralSceneEvent\", value = {keyId = key, keyAttribute = attribute}}, filter = {type = \"CentralSceneEvent\", data = {id = self:findDeviceId(id), keyId = key, keyAttribute = attribute}, sourceType = \"system\"}} end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tfrequency = {name = \"Frequency\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(freqday, freqnumber) return self:getFrequency(freqday,freqnumber) end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\t-- TODO : ne fonctionne plus sur firmware 5.050.13 => https://www.domotique-fibaro.fr/topic/14130-hc3-commande-shutdown/\r\n\t\treboothc3 = {name = \"RebootHC3\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\t--action = function() fibaro.homeCenter.systemService.reboot() end\r\n\t\t\t\t\t\t\t\t\t\taction   = function() api.post(\"/service/reboot\") end,\r\n\t\t\t\t\t\t\t\t\t\t--action = function() print(api.post(\"/service/reboot\")) end\r\n\t\t\t\t\t\t\t\t\t\t--[[\r\n\t\t\t\t\t\t\t\t\t\taction = function()\r\n\t\t\t\t\t\t\t\t\t\t\tlocal http = net.HTTPClient()\r\n\t\t\t\t\t\t\t\t\t\t\thttp:request(\"http://localhost/api/service/reboot\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess = function(response)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.info(\"success() : \" .. json.encode(response))\r\n\t\t\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t\t\terror = function(err)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.error(\"error() : \" .. json.encode(err))\r\n\t\t\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t\t\toptions = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod = \"POST\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theaders = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\"X-Fibaro-Version\"] = \"2\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\"Content-Type\"] = \"application/json\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata = \"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t--]]\r\n\t\t},\r\n\t\tsuspendhc3 = {name = \"SuspendHC3\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\t--action = function() fibaro.homeCenter.systemService.suspend() end\r\n\t\t\t\t\t\t\t\t\t\t--action = function() api.post(\"/service/suspend\") end\r\n\t\t\t\t\t\t\t\t\t\taction   = function()\r\n\t\t\t\t\t\t\t\t\t\t\tlocal http = net.HTTPClient()\r\n\t\t\t\t\t\t\t\t\t\t\thttp:request(\"http://localhost/api/service/suspend\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess = function(response)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.info(\"success() : \" .. json.encode(response))\r\n\t\t\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t\t\terror = function(err)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.error(\"error() : \" .. json.encode(err))\r\n\t\t\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t\t\toptions = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod = \"POST\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theaders = {[\"X-Fibaro-Version\"] = \"2\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tshutdownhc3 = {name = \"ShutdownHC3\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\t--action = function() fibaro.homeCenter.systemService.shutdown() end\r\n\t\t\t\t\t\t\t\t\t\t--action = function() api.post(\"/service/shutdown\") end\r\n\t\t\t\t\t\t\t\t\t\taction   = function()\r\n\t\t\t\t\t\t\t\t\t\t\tlocal http = net.HTTPClient()\r\n\t\t\t\t\t\t\t\t\t\t\thttp:request(\"http://localhost/api/service/shutdown\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess = function(response)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.info(\"success() : \" .. json.encode(response))\r\n\t\t\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t\t\terror = function(err)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.error(\"error() : \" .. json.encode(err))\r\n\t\t\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\t\t\toptions = {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod = \"POST\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theaders = {[\"X-Fibaro-Version\"] = \"2\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n--[[\r\n\t\talarm     = {name = \"Alarm\", -- TODO avec le QuickApp à la place du VD\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tif os.date(\"%H:%M\", self.runAt) == fibaro.getValue(self:findDeviceId(id), \"ui.lblAlarme.value\") then\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal days = fibaro.getValue(self:findDeviceId(id), \"ui.lblJours.value\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tdays = days:lower()\r\n\t\t\t\t\t\t\t\t\t\t\t\tselected = tools.split(days, \" \")\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor i = 1, #selected do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor j = 1, #self.trad.week_short do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif self.trad.week_short[j] == selected[i] then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif self.traduction.en.week[j]:lower() == os.date(\"%A\"):lower() then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\treturn false\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n--]]\r\n\t\tinfo      = {name = \"Info\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(property) if type(api.get(\"/settings/info\")[property])==\"nil\" then return false, string.format(self.trad.property_missing, property) else return true end end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(property) return api.get(\"/settings/info\")[property] end,\r\n\t\t},\r\n--[[\r\n    pluginscenario = {name = \"PluginScenario\",\r\n\t\t\t\t\t\t\t\t\t\tcontrol = function() if (self.currentAction and self.plugins[self.currentAction.name]) or (self.currentCondition and self.plugins[self.currentCondition.name]) then return true else return false, self.trad.plugin_not_found end end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(...)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal line = self.currentEntry.id..\"@\"..self.currentCondition.option_id\r\n\t\t\t\t\t\t\t\t\t\t\tlocal args = {...}\r\n\t\t\t\t\t\t\t\t\t\t\tlocal params = {{geaid = __fibaroSceneId}, {gealine = line}, {geamode = \"value\"}}\r\n\t\t\t\t\t\t\t\t\t\t\tfor i, v in ipairs(args) do table.insert(params, {[\"param\"..i] = self:getMessage(v)}) end\r\n\t\t\t\t\t\t\t\t\t\t\tlocal id = self.plugins[self.currentCondition.name]\r\n\t\t\t\t\t\t\t\t\t\t\tfibaro:startScene(id, params) -- fibaro.scene(\"execute\", id)\r\n\t\t\t\t\t\t\t\t\t\t\treturn self:waitWithTimeout(function()\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal vgplugins = self:getGlobalValue(self.pluginsvariables)\r\n\t\t\t\t\t\t\t\t\t\t\t\tif vgplugins and vgplugins ~= \"\" and vgplugins ~= \"NaN\" then self.plugins = json.decode(vgplugins) end\r\n\t\t\t\t\t\t\t\t\t\t\t\tif self.plugins.retour and self.plugins.retour[line] then return true, self.plugins.retour[line] end\r\n\t\t\t\t\t\t\t\t\t\t\tend, self.pluginretry, self.pluginmax)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\taction = function(...)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal args = {...}\r\n\t\t\t\t\t\t\t\t\t\t\tlocal params = {{geaid = __fibaroSceneId}, {gealine = self.currentEntry.id..\"@\"..self.currentAction.option_id}, {geamode = \"action\"}}\r\n\t\t\t\t\t\t\t\t\t\t\tfor i, v in ipairs(args) do table.insert(params, {[\"param\"..i] = self:getMessage(v)}) end\r\n\t\t\t\t\t\t\t\t\t\t\tlocal id = self.plugins[self.currentAction.name]\r\n\t\t\t\t\t\t\t\t\t\t\tfibaro:startScene(id, params) -- fibaro.scene(\"execute\", id)\r\n\t\t\t\t\t\t\t\t\t\tend\r\n    \t\t\t},\r\n--]]\r\n\t\tdoorlock  = {name = \"DoorLock\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends   = {\"value\"},\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) self.options.value.getValue(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id, value) if not id then id = self.currentMainId end if type(id) ~= \"table\" then id = {id} end for i=1, #id do if value == tools.tostring(\"secure\") then fibaro.call(self:findDeviceId(id[i]),\"secure\") else fibaro.call(self:findDeviceId(id[i]),\"unsecure\") end end end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\to_r       = {name = \"Or\",\r\n\t\t\t\t\t\t\t\t\t\toptimize   = true,\r\n\t\t\t\t\t\t\t\t\t\tkeepValues = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol    = function(...) local args = {...} for i = 1, #args do if type(self:getOption(args[i]))==\"nil\" then return false end end return true end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue   = function(...) local args = {...} for i = 1, #args do if self:getOption(args[i]).check() then return true end end return false end,\r\n\t\t\t\t\t\t\t\t\t\tgetName    = function(...)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal args = {...}\r\n\t\t\t\t\t\t\t\t\t\t\tlocal name = \"\"\r\n\t\t\t\t\t\t\t\t\t\t\tfor i = 1, #args do if self:getOption(args[i]).check() then name = name .. \" \" .. self:getOption(args[i]).getModuleName() end end\r\n\t\t\t\t\t\t\t\t\t\t\treturn tools.trim(name)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean  = true,\r\n\t\t},\r\n\t\txor       = {name = \"XOr\",\r\n\t\t\t\t\t\t\t\t\t\toptimize   = true,\r\n\t\t\t\t\t\t\t\t\t\tkeepValues = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol    = function(...) local args = {...} for i = 1, #args do if type(self:getOption(args[i]))==\"nil\" then return false end end return true end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue   = function(...) local args = {...} local nb = 0 for i = 1, #args do if self:getOption(args[i]).check() then nb = nb+1 end end return nb == 1 end,\r\n\t\t\t\t\t\t\t\t\t\tgetName    = function(...)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal args = {...}\r\n\t\t\t\t\t\t\t\t\t\t\tlocal name = \"\"\r\n\t\t\t\t\t\t\t\t\t\t\tfor i = 1, #args do if self:getOption(args[i]).check() then name = name .. \" \" .. self:getOption(args[i]).getModuleName() end end\r\n\t\t\t\t\t\t\t\t\t\t\treturn tools.trim(name)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean  = true,\r\n\t\t},\r\n\t\thue       = {name = \"Hue\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id, property) if not id then id = self.currentMainId end return fibaro.getValue(self:findDeviceId(id), property) end,\r\n\t\t\t\t\t\t\t\t\t\tgetHubParam=function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal device = api.get(\"/devices/\"..self:findDeviceId(id))\r\n\t\t\t\t\t\t\t\t\t\t\tlocal lightid = device.properties.lightId\r\n\t\t\t\t\t\t\t\t\t\t\tif device.parentId > 0 then device = api.get(\"/devices/\"..device.parentId) end\r\n\t\t\t\t\t\t\t\t\t\t\treturn lightid, device.properties.ip, device.properties.userName\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, property, value) if type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal lightid, ip, username = self.options.hue.getHubParam(self:findDeviceId(id[i]))\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal datas = \"{\\\"\"..property..\"\\\":\"..tools.iif(type(value)==\"boolean\", tostring(value), value)..\"}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal http = net.HTTPClient()\r\n\t\t\t\t\t\t\t\t\t\t\t\thttp:request(\"http://\"..ip..\"/api/\"..username..\"/lights/\"..lightid..\"/state\",  { options =  { method =  \"PUT\", data = datas }, success = function(response) end, error  = function(err) tools.error(err, \"red\") end })\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\ttranspose = {name = \"Transpose\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(table1, table2, value) return self:translate(value, table1, table2) end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(table1, table2, value) return self:translate(value, table1, table2) end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\troomlights = {name = \"RoomLights\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(roomName, action)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal rooms = api.get(\"/rooms\")\r\n\t\t\t\t\t\t\t\t\t\t\tfor _, room in pairs(rooms) do\r\n\t\t\t\t\t\t\t\t\t\t\t\tif room.name:lower() == roomName:lower() then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor _, device in pairs(api.get(\"/devices?type=com.fibaro.philipsHueLight&roomID=\"..room.id)) do fibaro.call(device.id, action) end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor _, device in pairs(api.get(\"/devices?property=[isLight,true]&roomID=\"..room.id)) do fibaro.call(device.id, action) end\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tsectionlights = {name = \"SectionLights\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends  = {\"roomlights\"},\r\n\t\t\t\t\t\t\t\t\t\taction   = function(sectionName, action)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal sections = api.get(\"/sections\")\r\n\t\t\t\t\t\t\t\t\t\t\tfor _, section in pairs(sections) do\r\n\t\t\t\t\t\t\t\t\t\t\t\tif section.name:lower() == sectionName:lower() then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor _, room in pairs(api.get(\"/rooms\")) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif room.sectionID == section.id then self.options.roomlights.action(room.name, action) end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tonoff     = {name = \"OnOff\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends   = {\"transpose\"},\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id) return self:getOption({\"Transpose\", {true, false}, {\"ON\", \"OFF\"}, {\"TurnOn\", id}}).getValue() end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id) self:getOption({\"Switch\", id}).action() end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tresult    = {name = \"Result\", math = true, getValue = function(position) if not position then position = 1 end return self.currentEntry.conditions[position].lastDisplayValue end },\r\n\t\tname      = {name = \"Name\", getValue = function(position) if not position then position = 1 end return self.currentEntry.conditions[position].getModuleName() end },\r\n\t\troom      = {name = \"Room\", getValue = function(position) if not position then position = 1 end return self.currentEntry.conditions[position].getModuleRoom() end },\r\n\t\truns      = {name = \"Runs\", math = true, getValue = function() return self.nbRun end },\r\n\t\tseconds   = {name = \"Seconds\", math = true, getValue = function() return self.checkEvery end },\r\n\t\tduration  = {name = \"Duration\", math = true, getValue = function() local d, _ = self:getDureeInString(os.difftime(self.runAt, self.currentEntry.firstvalid)) return d end },\r\n\t\tdurationfull = {name = \"DurationFull\", getValue = function() local _, d = self:getDureeInString(os.difftime(self.runAt, self.currentEntry.firstvalid)) return d end },\r\n\t\tsunrise   = {name = \"Sunrise\", getValue = function() return fibaro.getValue(1, \"sunriseHour\"):gsub(\":\", \" \" .. self.trad.hour .. \" \") end },\r\n\t\tsunset    = {name = \"Sunset\", getValue = function() return fibaro.getValue(1, \"sunsetHour\"):gsub(\":\", \" \" .. self.trad.hour .. \" \") end },\r\n\t\tdate      = {name = \"Date\", getValue = function() return os.date(self.trad.date_format, self.runAt) end },\r\n\t\ttrigger   = {name = \"Trigger\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function()\r\n\t\t\t\t\t\t\t\t\t\t\t--tools.debug('\"Trigger\" : options.trigger.getValue() self.source.type='..tostring(self.source.type)..' self.source.propertyName='..tostring(self.source.propertyName)..' self.source.deviceID='..tostring(self.source.deviceID)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\tif self.source.type == \"autostart\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn \"autostart\"\r\n\t\t\t\t\t\t\t\t\t\t\telseif self.source.type == \"device\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tif self.source.propertyName then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn \"Device[\" .. self.source.id .. \" - \" .. self.source.propertyName .. \"]\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn \"Device[\" .. self.source.id .. \"]\"\r\n\t\t\t\t\t\t\t\t\t\t\telseif self.source.type == \"global-variable\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn \"Global[\" .. self.source.name .. \"]\"\r\n\t\t\t\t\t\t\t\t\t\t\telseif self.source.type == \"alarm\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn \"Alarm[\" .. self.source.id .. \"]\"\r\n\t\t\t\t\t\t\t\t\t\t\telseif self.source.type == \"profile\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn \"Profile[\" .. self.source.id .. \"]\"\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\treturn \"manual\"\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tdatefull  = {name = \"DateFull\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function()\r\n\t\t\t\t\t\t\t\t\t\t\tlocal jour = tonumber(os.date(\"%w\", self.runAt))\r\n\t\t\t\t\t\t\t\t\t\t\tif jour == 0 then jour = 6 else jour = jour-1 end\r\n\t\t\t\t\t\t\t\t\t\t\treturn self.trad.week[jour+1] .. \" \" .. os.date(\"%d\", self.runAt).. \" \" .. self.trad.months[tonumber(os.date(\"%m\", self.runAt))].. \" \" .. os.date(\"%Y\", self.runAt)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\ttranslate = {name = \"Translate\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(key, word)\r\n\t\t\t\t\t\t\t\t\t\t\tword = self:getMessage(word)\r\n\t\t\t\t\t\t\t\t\t\t\treturn self:translatetrad(tools.trim(key), tools.trim(word))\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tsonosmp3  = {name = \"Sonos MP3\",\r\n\t\t\t\t\t\t\t\t\t\taction = function(vd_id, button_id, filepath, volume)\r\n\t\t\t\t\t\t\t\t\t\t\tif not volume then volume = 30 end\r\n\t\t\t\t\t\t\t\t\t\t\tlocal _f = fibaro\r\n\t\t\t\t\t\t\t\t\t\t\tlocal _x ={root=\"x_sonos_object\",load=function(b)local c=_f:getGlobalValue(b.root)if string.len(c)>0 then local d=json.decode(c)if d and type(d)==\"table\"then return d else _f:debug(\"Unable to process data, check variable\")end else _f:debug(\"No data found!\")end end,set=function(b,e,d)local f=b:load()if f[e]then for g,h in pairs(d)do f[e][g]=h end else f[e]=d end;_f:setGlobal(b.root,json.encode(f))end,get=function(b,e)local f=b:load()if f and type(f)==\"table\"then for g,h in pairs(f)do if tostring(g)==tostring(e or\"\")then return h end end end;return nil end}\r\n\t\t\t\t\t\t\t\t\t\t\t_x:set(tostring(self:findDeviceId(vd_id)), { stream = {stream=filepath, source=\"local\", duration=\"auto\", volume=volume} })\r\n\t\t\t\t\t\t\t\t\t\t\t_f:call(self:findDeviceId(vd_id), \"pressButton\", button_id)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tsonostts  = {name = \"Sonos TTS\",\r\n\t\t\t\t\t\t\t\t\t\taction = function(vd_id, button_id, message, volume)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal message = self:getMessage(message)\r\n\t\t\t\t\t\t\t\t\t\t\tif not volume then volume = 30 end\r\n\t\t\t\t\t\t\t\t\t\t\tlocal _f = fibaro\r\n\t\t\t\t\t\t\t\t\t\t\tlocal _x ={root=\"x_sonos_object\",load=function(b)local c=_f:getGlobalValue(b.root)if string.len(c)>0 then local d=json.decode(c)if d and type(d)==\"table\"then return d else _f:debug(\"Unable to process data, check variable\")end else _f:debug(\"No data found!\")end end,set=function(b,e,d)local f=b:load()if f[e]then for g,h in pairs(d)do f[e][g]=h end else f[e]=d end;_f:setGlobal(b.root,json.encode(f))end,get=function(b,e)local f=b:load()if f and type(f)==\"table\"then for g,h in pairs(f)do if tostring(g)==tostring(e or\"\")then return h end end end;return nil end}\r\n\t\t\t\t\t\t\t\t\t\t\t_x:set(tostring(self:findDeviceId(vd_id)), { tts = {message=message, duration='auto', language=self.trad.locale, volume=volume} })\r\n\t\t\t\t\t\t\t\t\t\t\t_f:call(self:findDeviceId(vd_id), \"pressButton\", button_id)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tjsondecodefromglobal = {name = \"JSON Decode from Global\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(vg, property) return self:decode(self:getGlobalValue(vg), property) end,\r\n\t\t},\r\n\t\tjsondecodefromlabel = {name = \"JSON Decode from Label\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id, label, property) return self:decode(tools.getView(id, label, \"text\"), property) end,\r\n\t\t},\r\n\t\ttempext    = {name = \"Temp. Ext.\", math = true, getValue = function() return fibaro.getValue(3, \"Temperature\") end, },\r\n\t\ttempexttts = {name = \"Temp. Ext. TTS\", getValue = function() local value = fibaro.getValue(3, \"Temperature\") if value:find(\"%.\") then return value:gsub(\"%.\", \" degrés \") end return value .. \" degrés\" end, },\r\n\t\tmonthly   = {name = \"monthly\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(day)\r\n\t\t\t\t\t\t\t\t\t\t\tday = day or \"\"\r\n\t\t\t\t\t\t\t\t\t\t\tday = tostring(day):lower()\r\n\t\t\t\t\t\t\t\t\t\t\tif day == \"\" or day == \"begin\" or day == \"first\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tday = 1;\r\n\t\t\t\t\t\t\t\t\t\t\telseif day == \"end\" or day == \"last\" or day == \"31\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal now = os.date(\"*t\", self.runAt)\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal tomorrow = os.time{year=now.year, month=now.month, day=now.day+1}\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn now.month ~= os.date(\"*t\", tomorrow).month\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tif tools.isNumber(day) then\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn tonumber(os.date(\"%d\", self.runAt)) == tonumber(day)\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tday = self:translate(day, self.trad.week, self.traduction.en.week)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal n,d = os.date(\"%d %A\", self.runAt):match(\"(%d+).?(%w+)\")\r\n\t\t\t\t\t\t\t\t\t\t\treturn ( tonumber(n) < 8 and d:lower() == day )\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tslider    = {name = \"Slider\",\r\n\t\t\t\t\t\t\t\t\t\tmath     = true,\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\t--depends = {\"label\"},\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id, property) if not self.options.checkslider.getValue(id, property) then return false, string.format(self.trad.slider_missing, id, property) else return true end end,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function(id, property) return self.options.label.getValue(id, property) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id, property) return tools.getView(self:findDeviceId(id), property, \"value\") end, -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t--action=function(id, property, value)\r\n\t\t\t\t\t\t\t\t\t\t\t--if (type(id) ~= \"table\") then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\t--for i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\t--property = self:findButtonId(self:findDeviceId(id[i]), property)\r\n\t\t\t\t\t\t\t\t\t\t\t\t--fibaro.call(id[i], \"setSlider\", property, self:incdec(self:getMessage(value), self.options.label.getValue(id[i], property)))\r\n\t\t\t\t\t\t\t\t\t\t\t--end\r\n\t\t\t\t\t\t\t\t\t\t--end\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id, property, value) -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\t--fibaro.call(self:findDeviceId(id[i]), \"updateView\", property, \"value\", tostring(value)) -- Ne déclenche pas la fonction associée au slider\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal qa = api.get(\"/devices/\"..self:findDeviceId(id[i])..\"/properties/uiCallbacks\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor j=1, #(qa and qa.value or {}) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif qa.value[j].name == property then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfibaro.call(self:findDeviceId(id[i]), qa.value[j].callback, {elementName = property, deviceId = self:findDeviceId(id[i]), eventType = qa.value[j].eventType, values = {value}})\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\ttrigger = function(id, property) return {event = {type = \"device\", id = self:findDeviceId(id), propertyName = \"value\", componentName = property}, filter = {type = \"PluginChangedViewEvent\", data = {deviceId = self:findDeviceId(id), propertyName = \"value\", componentName = property}}} end,\r\n\t\t},\r\n\t\tpolling   = {name = \"Polling\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction   = function(id) if type(id) ~= \"table\" then id = {id} end for i=1, #id do api.post(\"/devices/\"..id[i]..\"/action/poll\") end end,\r\n\t\t},\r\n\t\tledbrightness = {name = \"LedBrightness\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\t--getValue = function()  return fibaro:getLedBrightness() end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function() return api.get(\"/settings/led\").brightness end, -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t--action=function(level) fibaro:setLedBrightness(tonumber(level)) end\r\n\t\t\t\t\t\t\t\t\t\taction   = function(level) api.put(\"/settings/led\", {brightness = tonumber(level)}) end, -- Lazer\r\n\t\t},\r\n\t\tdevicestate = {name = \"DeviceState\",\r\n\t\t\t\t\t\t\t\t\t\toptimize = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal device = api.get(\"/devices/\"..self:findDeviceId(id))\r\n\t\t\t\t\t\t\t\t\t\t\tif device.parentId > 1 then device = api.get(\"/devices/\"..device.parentId) end\r\n\t\t\t\t\t\t\t\t\t\t\treturn device.properties.deviceState\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t},\r\n\t\tneighborlist = {name = \"NeighborList\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tids       = \"\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal device = api.get(\"/devices/\"..self:findDeviceId(id))\r\n\t\t\t\t\t\t\t\t\t\t\tif device.parentId > 1 then device = api.get(\"/devices/\"..device.parentId) end\r\n\t\t\t\t\t\t\t\t\t\t\tself.options.neighborlist.ids = device.properties.neighborList\r\n\t\t\t\t\t\t\t\t\t\t\treturn json.encode(device.properties.neighborList)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tgetName   = function() return self:getName(self.options.neighborlist.ids, self.showRoomNames) end,\r\n\t\t\t\t\t\t\t\t\t\t--isBoolean = true,\r\n\t\t},\r\n\t\tlastworkingroute = {name = \"LastWorkingRoute\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\tids       = \"\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal device = api.get(\"/devices/\"..self:findDeviceId(id))\r\n\t\t\t\t\t\t\t\t\t\t\tif device.parentId > 1 then device = api.get(\"/devices/\"..device.parentId) end\r\n\t\t\t\t\t\t\t\t\t\t\tself.options.lastworkingroute.ids = device.properties.lastWorkingRoute\r\n\t\t\t\t\t\t\t\t\t\t\treturn json.encode(device.properties.lastWorkingRoute)\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tgetName   = function() return self:getName(self.options.lastworkingroute.ids, self.showRoomNames) end,\r\n\t\t\t\t\t\t\t\t\t\t--isBoolean = true,\r\n\t\t},\r\n\t\tcheckvg   = {name = \"CheckVG\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(name)\r\n\t\t\t\t\t\t\t\t\t\t\tif not self.vglist then\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.vglist = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor _, vg in pairs(api.get(\"/globalVariables\")) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.vglist[vg.name] = true\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tlocal result = self.vglist[name] or false\r\n\t\t\t\t\t\t\t\t\t\t\treturn result\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tchecklabel = {name = \"CheckLabel\",\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id, name)\r\n\t\t\t\t\t\t\t\t\t\t\tif not self.qaLabelList then\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal function addLabel(qaid, s)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif type(s) == 'table' then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif s.type == \"label\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--tools.debug(\"checklabel.getValue() \" .. tostring(qaid) .. \" = \" .. tostring(s.name)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself.qaLabelList[qaid][s.name] = true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor _,v in pairs(s) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal r = addLabel(qaid, v)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif r then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.qaLabelList = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal qas = api.get(\"/devices?interface=quickApp&enabled=true\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor _, qa in pairs(qas) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.qaLabelList[qa.id] = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t--tools.debug(\"checklabel.getValue() addLabel...\") -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taddLabel(qa.id, qa.properties.viewLayout[\"$jason\"].body.sections)\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tif not self.qaLabelList[self:findDeviceId(id)] then return false, string.format(self.trad.id_missing, self:findDeviceId(id)) end\r\n\t\t\t\t\t\t\t\t\t\t\t--return self.qaLabelList[self:findDeviceId(id)][name:gsub(\"ui.\", \"\"):gsub(\".value\", \"\")] or false\r\n\t\t\t\t\t\t\t\t\t\t\treturn self.qaLabelList[self:findDeviceId(id)][name] or false\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tcheckslider = {name = \"CheckSlider\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id, name)\r\n\t\t\t\t\t\t\t\t\t\t\tif not self.qaSliderList then\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal function addSlider(qaid, s)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif type(s) == 'table' then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif s.type == \"slider\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--tools.debug(\"checkslider.getValue() \" .. tostring(qaid) .. \" = \" .. tostring(s.name)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tself.qaSliderList[qaid][s.name] = true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor _,v in pairs(s) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal r = addSlider(qaid, v)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif r then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn r\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\tself.qaSliderList = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal qas = api.get(\"/devices?interface=quickApp&enabled=true\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor _, qa in pairs(qas) do\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tself.qaSliderList[qa.id] = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t--tools.debug(\"checkslider.getValue() addSlider...\") -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taddSlider(qa.id, qa.properties.viewLayout[\"$jason\"].body.sections)\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tif not self.qaSliderList[self:findDeviceId(id)] then return false, string.format(self.trad.id_missing, self:findDeviceId(id)) end\r\n\t\t\t\t\t\t\t\t\t\t\treturn self.qaSliderList[self:findDeviceId(id)][name] or false\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tprotection = {name = \"Protection\", -- par 971jmd\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tdepends   = {\"property\"},\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function(id)\r\n\t\t\t\t\t\t\t\t\t\t\tlocal loc = tonumber(fibaro.getValue(self:findDeviceId(id), \"localProtectionState\")) > 0\r\n\t\t\t\t\t\t\t\t\t\t\tlocal rf = tonumber(fibaro.getValue(self:findDeviceId(id), \"RFProtectionState\")) > 0\r\n\t\t\t\t\t\t\t\t\t\t\tlocal result = \"off\"\r\n\t\t\t\t\t\t\t\t\t\t\tif loc then result = \"local\" end\r\n\t\t\t\t\t\t\t\t\t\t\tif rf then result = \"rf\" end\r\n\t\t\t\t\t\t\t\t\t\t\tif loc and rf then result = \"local_rf\" end\r\n\t\t\t\t\t\t\t\t\t\t\treturn result\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) if not id then id = self.currentMainId end return self.options.number.control(id) end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id,typeprotection,mode)\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tif type(id) ~= \"table\" then id = {id} end\r\n\t\t\t\t\t\t\t\t\t\t\tlocal arg1 = \"0\"\r\n\t\t\t\t\t\t\t\t\t\t\tlocal arg2 = 0\r\n\t\t\t\t\t\t\t\t\t\t\tif typeprotection:lower() == \"local_rf\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\tif mode:lower() == \"on\" then arg1 = \"2\" arg2 = 1 end\r\n\t\t\t\t\t\t\t\t\t\t\telseif typeprotection:lower() == \"local\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\t--arg1 = \"0\" arg2 = 2\r\n\t\t\t\t\t\t\t\t\t\t\t\tif mode:lower() == \"on\" then arg1 = \"2\" arg2 = 0 end\r\n\t\t\t\t\t\t\t\t\t\t\telseif typeprotection:lower() == \"rf\" then\r\n\t\t\t\t\t\t\t\t\t\t\t\t--arg1 = \"1\" arg2 = 0\r\n\t\t\t\t\t\t\t\t\t\t\t\tif mode:lower() == \"on\" then arg1 = \"0\" arg2 = 1 end\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #id do\r\n\t\t\t\t\t\t\t\t\t\t\t\tfibaro.call(self:findDeviceId(id[i]), \"setProtection\", arg1, arg2)\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n--[[\r\n    multialarm = {name = \"multiAlarm\", -- par drboss\r\n                    optimize = true,\r\n                    control = function(id, label)\r\n                      local res, msg = self.options.label.control(id, label..\"j\")\r\n                      if (msg) then msg = msg:gsub(label..\"j\", label) end\r\n                      return res, msg\r\n                    end,\r\n                    getValue = function(id, multi_a)\r\n                      if (os.date(\"%H:%M\", self.runAt) == fibaro.getValue(self:findDeviceId(id), \"ui.\"..multi_a..\"h.value\")) then\r\n                        local days = fibaro.getValue(self:findDeviceId(id), \"ui.\"..multi_a..\"j.value\")\r\n                        days = days:lower()\r\n                        selected = tools.split(days, \" \")\r\n                        for i = 1, #selected do\r\n                          for j = 1, #self.trad.week_short do\r\n                            if (self.trad.week_short[j] == selected[i]) then\r\n                              if (self.traduction.en.week[j]:lower() == os.date(\"%A\"):lower()) then\r\n                                return true\r\n                              end\r\n                            end\r\n                          end\r\n                        end\r\n                      end\r\n                      return false\r\n                    end,\r\n                },\r\n--]]\r\n\t\tstringtoalpha = {name = \"StringToAlpha\", --- par MAM78\r\n\t\t\t\t\t\t\t\t\t\tcontrol  = function(condition, value) if condition == nil then return false, \"Check option StringToAlpha condition\" else return true end end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue = function(condition, value) local newvalue = \"\" for word in string.gmatch(value, \"%a+\") do newvalue = newvalue..word end return condition == newvalue, newvalue end,\r\n\t\t},\r\n\t\tisevenweek = {name = \"Even week\",\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function() return os.date(\"%w\") % 2 == 0 end,\r\n\t\t\t\t\t\t\t\t\t\tisBoolean = true,\r\n\t\t},\r\n\t\tprofile = {name = \"Profile\", -- Lazer\r\n\t\t\t\t\t\t\t\t\t\toptimize  = true,\r\n\t\t\t\t\t\t\t\t\t\tcontrol   = function(id) return type(id) == \"number\" and api.get(\"/profiles/\" .. tostring(id)) and true or false, string.format(self.trad.profile_missing, tostring(id)) end,\r\n\t\t\t\t\t\t\t\t\t\tgetValue  = function() return api.get(\"/profiles\").activeProfile end,\r\n\t\t\t\t\t\t\t\t\t\taction    = function(id) api.post(\"/profiles/activeProfile/\" .. tostring(id)) end,\r\n\t\t\t\t\t\t\t\t\t\ttrigger   = function(id) return {event = {type = \"profile\", id = id}, filter = {type = \"ActiveProfileChangedEvent\", data = {newActiveProfile = id}}} end,\r\n\t\t},\r\n\t}\r\n\r\n\t-- Alias - self:copyOption(option, <nouveau nom>)\r\n\t--self.options.vd = self:copyOption(\"virtualdevice\", \"VD\")\r\n\tself.options.qa = self:copyOption(\"quickapp\", \"QA\")\r\n\tself.options.scene = self:copyOption(\"scenario\")\r\n\tself.options.start = self:copyOption(\"scenario\")\r\n\tself.options.startscene = self:copyOption(\"scenario\")\r\n\tself.options.killscenario = self:copyOption(\"kill\")\r\n\tself.options.killscene = self:copyOption(\"kill\")\r\n\tself.options.enablescene = self:copyOption(\"enablescenario\")\r\n\tself.options.disablescene = self:copyOption(\"disablescenario\")\r\n\tself.options.wakeup = self:copyOption(\"dead\")\r\n\tself.options.notdst = self:copyOption(\"nodst\", \"Not DST\")\r\n\tself.options.photo = self:copyOption(\"picture\", \"Photo\")\r\n\tself.options.phototomail = self:copyOption(\"picturetoemail\", \"PhotoToMail\")\r\n\tself.options.startprogram = self:copyOption(\"program\", \"startProgram\")\r\n\tself.options.push = self:copyOption(\"portable\", \"Push\")\r\n\tself.options.power = self:copyOption(\"sensor\", \"Power\")\r\n\t--self.options.pressbutton = self:copyOption(\"virtualdevice\", \"PressButton\")\r\n\tself.options.slide = self:copyOption(\"value2\", \"Slide\")\r\n\tself.options.orientation = self:copyOption(\"value2\", \"Orientation\")\r\n\tself.options.issceneenabled = self:copyOption(\"enablescenario\", \"isSceneEnabled\")\r\n\tself.options.isscenedisabled = self:copyOption(\"disablescenario\", \"isSceneDisabled\")\r\n\t--self.options.runconfigscene = self:copyOption(\"setrunconfigscenario\", \"RunConfigScene\")\r\n\tself.options.runmodescene = self:copyOption(\"setrunmodescenario\", \"RunModeScene\")\r\n\tself.options.isscenerunning = self:copyOption(\"runningscene\", \"isSceneRunning\")\r\n\tself.options.dayevenodd = self:copyOption(\"frequency\", \"DayEvenOdd\")\r\n\tself.options.notstarted = self:copyOption(\"notstart\")\r\n\tself.options.deviceicon = self:copyOption(\"currenticon\", \"DeviceIcon\")\r\n\tself.options.color = self:copyOption(\"rgb\", \"Color\")\r\n\r\n\t-- MOVED by Lazer\r\n\r\n\tself.options_id = 0\r\n\r\n\tself.id_entry = 0\r\n\tself.entries = {}\r\n\r\n\tself.nbRun = -1\r\n\tself.currentMainId = nil\r\n\tself.currentEntry = nil\r\n\r\nend -- GEA:__init\r\n\r\nfunction GEA:copyOption(optionName, newName)\r\n\tlocal copy = {}\r\n\tlocal option = self.options[optionName] -- Lazer : local\r\n\tcopy.name = newName or option.name\r\n\tif option.math then copy.math = option.math end\r\n\tif option.optimize then copy.optimize = option.optimize end\r\n\tif option.keepValues then copy.keepValues = option.keepValues end\r\n\tif option.control then copy.control = option.control end\r\n\tif option.getValue then copy.getValue = option.getValue end\r\n\tif option.action then copy.action = option.action end\r\n\tif option.depends then copy.depends = option.depends else copy.depends = {} end\r\n\tif option.trigger then copy.trigger = option.trigger end -- Lazer\r\n\ttable.insert(copy.depends, optionName)\r\n\treturn copy\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n--\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getDuree(valeur)\r\n\tif tonumber(valeur) then\r\n\t\treturn tonumber(valeur)\r\n\telse\r\n\t\tlocal duree = fibaro.getGlobalVariable(valeur)\r\n\t\tif duree and duree:find(\":\") then\r\n\t\t\tlocal durees = tools.split(duree, \":\")\r\n\t\t\tif #durees == 2 then local h,m = string.match(duree, \"(%d+):(%d+)\") return h*3600 + m*60 end\r\n\t\t\tif #durees == 3 then local h,m,s = string.match(duree, \"(%d+):(%d+):(%d+)\") return h*3600 + m*60 + s end\r\n\t\tend\r\n\t\treturn tonumber(duree) or 30\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne l'ID d'un scénario selon son nom\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:findScenarioId(scenarioId)\r\n\tif tonumber(scenarioId) then\r\n\t\treturn tonumber(scenarioId)\r\n\telse\r\n\t\tlocal scenes = api.get(\"/scenes\")\r\n\t\tlocal sceneId = nil\r\n\t\tfor _, scene in pairs(scenes) do\r\n\t\t\t--if scene.name:lower() == scenarioId:lower() then\r\n\t\t\tif scene.name == scenarioId then\r\n\t\t\t\tsceneId = scene.id\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tassert(tonumber(sceneId), string.format(self.trad.scene_is_missing, scenarioId))\r\n\t\t--if sceneId then\r\n\t\t\treturn sceneId\r\n\t\t--else\r\n\t\t\t--tools.error(string.format(self.trad.scene_is_missing, scenarioId), \"red\")\r\n\t\t\t----fibaro:abort()\r\n\t\t\t--tools.error(\"self:findScenarioId() => fibaro:abort()\", \"red\")\r\n\t\t--end\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne l'ID d'un module selon son nom NOM_DEVICE[@ROOM]\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:findDeviceId(deviceId, silent)\r\n\tif tonumber(deviceId) then\r\n\t\treturn tonumber(deviceId)\r\n\telseif type(deviceId) ~= \"string\" then\r\n\t\treturn deviceId\r\n\telse\r\n\t\tif self.nameToId[deviceId] then\r\n\t\t\treturn self.nameToId[deviceId]\r\n\t\tend\r\n\t\tlocal search = \"/devices?name=\"..deviceId\r\n\t\tif deviceId:find(\"@\") then\r\n\t\t\tsearch = \"/devices?name=\"..tools.split(deviceId, \"@\")[1]\r\n\t\t\tlocal rooms = api.get(\"/rooms\")\r\n\t\t\tfor _, room in pairs(rooms) do\r\n\t\t\t\tif room.name:lower() == tools.split(deviceId, \"@\")[2]:lower() then\r\n\t\t\t\t\tsearch = search .. \"&roomID=\"..room.id\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tlocal devices = api.get(search)\r\n\t\tif #devices > 0 then\r\n\t\t\tself.nameToId[deviceId] = devices[1].id\r\n\t\t\treturn devices[1].id\r\n\t\telse\r\n\t\t\tif silent then\r\n\t\t\t\treturn deviceId\r\n\t\t\tend\r\n\t\t\terror(string.format(self.trad.device_is_missing, deviceId))\r\n\t\t\t--tools.error(string.format(self.trad.device_is_missing, deviceId), \"red\")\r\n\t\t\t----fibaro:abort()\r\n\t\t\t--tools.error(\"self:findDeviceId() => fibaro:abort()\", \"red\")\r\n\t\tend\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne l'ID d'un utilisateur selon son nom\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:findUserId(userId) -- Lazer\r\n\tif tonumber(userId) then\r\n\t\treturn tonumber(userId)\r\n\telse\r\n\t\tlocal users = api.get(\"/users\")\r\n\t\tlocal user_id = nil\r\n\t\tfor _, user in pairs(users) do\r\n\t\t\tif user.name == userId then\r\n\t\t\t\tuser_id = user.id\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tassert(tonumber(user_id), string.format(self.trad.user_missing, userId))\r\n\t\treturn user_id\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne l'ID d'un mobile selon son nom\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:findMobileId(mobileId) -- Lazer\r\n\tif tonumber(mobileId) then\r\n\t\treturn tonumber(mobileId)\r\n\telse\r\n\t\tlocal iosDevices = api.get(\"/iosDevices\")\r\n\t\tlocal iosDeviceId = nil\r\n\t\tfor _, iosDevice in pairs(iosDevices) do\r\n\t\t\tif iosDevice.name == mobileId then\r\n\t\t\t\tiosDeviceId = iosDevice.id\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tassert(tonumber(iosDeviceId), string.format(self.trad.user_missing, mobileId))\r\n\t\treturn iosDeviceId\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne l'ID d'une partition d'alarme selon son nom\r\n-- --------------------------------------------------------------------------------\r\n--[[\r\nfunction GEA:findAlarmId(alarmId) -- Lazer\r\n\tif tonumber(alarmId) then\r\n\t\treturn tonumber(alarmId)\r\n\telse\r\n\t\tlocal partitions = api.get(\"/alarms/v1/partitions\")\r\n\t\tlocal partitionId = nil\r\n\t\tfor _, partition in pairs(partitions) do\r\n\t\t\tif partition.name == alarmId then\r\n\t\t\t\tpartitionId = partition.id\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tassert(tonumber(partitionId), string.format(self.trad.partition_missing, alarmId))\r\n\t\treturn partitionId\r\n\tend\r\nend\r\n--]]\r\n\r\n-- ----------------------------------------------------------\r\n-- Proposition de pepite et Felig\r\n-- Retrouve l'id d'un bouton selon son numéro, son id ou son nom\r\n-- ----------------------------------------------------------\r\n--[[\r\n  function GEA:findButtonId(deviceId, buttonId)\r\n    if (tonumber(buttonId)) then\r\n      return tonumber(buttonId)\r\n    else\r\n      if (not self.buttonIds[deviceId .. \" - \" .. buttonId]) then\r\n        local device = api.get(\"/devices/\"..deviceId)\r\n        for i = 1, #device.properties.rows do\r\n          if (device.properties.rows[i].type == \"button\") then\r\n            for j = 1, #device.properties.rows[i].elements do\r\n              if (self:compareString(device.properties.rows[i].elements[j].name, buttonId) or self:compareString(device.properties.rows[i].elements[j].caption, buttonId)) then\r\n                self.buttonIds[deviceId .. \" - \" .. buttonId] = device.properties.rows[i].elements[j].id\r\n                return self.buttonIds[deviceId .. \" - \" .. buttonId]\r\n              end\r\n            end\r\n          end\r\n        end\r\n      end\r\n      return self.buttonIds[deviceId .. \" - \" .. buttonId]\r\n    end\r\n  end\r\n--]]\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Proposition pepite self.getFrequency pour Frequency\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getFrequency(day, number) --day : 1-31 wday :1-7 (1 :sunday)\r\n\tlocal t = os.date(\"*t\", self.runAt)\r\n\tlocal semainepaire = os.date(\"%W\", self.runAt) %2 == 0\r\n\tif os.date(\"%A\", self.runAt):lower() == day:lower() then\r\n\t\treturn (number == 2 and semainepaire) or t[\"day\"] < 8\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne le contenu d'une variable globale\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getGlobalValue(name)\r\n\tif self.options.checkvg.getValue(name) then\r\n\t\treturn fibaro.getGlobalVariable(name)\r\n\tend\r\n\treturn nil\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Met et retourne le nom d'un module en cache\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getNameInCache(id)\r\n\tlocal id_num = self:findDeviceId(id)\r\n\tif type(id_num) == \"number\" then\r\n\t\tid = tonumber(id_num)\r\n\t\tif not self.moduleNames[id_num] then\r\n\t\t\tself.moduleNames[id_num] = fibaro.getName(id_num)\r\n\t\tend\r\n\t\treturn self.moduleNames[id_num] or self.trad.name_is_missing\r\n\telse\r\n\t\treturn \"\"\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Met et retourne le nom d'une pièce d'un module en cache\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getRoomInCache(id)\r\n\tlocal id_num = self:findDeviceId(id)\r\n\tif type(id_num) == \"number\" then\r\n\t\tid = tonumber(id_num)\r\n\t\tif not self.moduleRooms[id_num] then\r\n\t\t\tlocal idRoom = api.get(\"/devices/\"..id_num)\r\n\t\t\tif idRoom then idRoom = idRoom.roomID end\r\n\t\t\tif idRoom and idRoom > 0 then\r\n\t\t\t\tself.moduleRooms[id_num] = fibaro.getRoomName(idRoom)\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn self.moduleRooms[id_num] or self.trad.room_is_missing\r\n\telse\r\n\t\treturn \"\"\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne le nom d'un module (pièce optionnelle)\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getName(id, withRoom)\r\n\tif type(id) ~= \"table\" then id = {id} end\r\n\tlocal names = \"\"\r\n\tfor i=1, #id do\r\n\t\tif names ~= \"\" then names = names .. \", \" end\r\n\t\tif withRoom then\r\n\t\t\tnames = names .. self:getNameInCache(id[i]) .. \" (\" .. self:getRoomInCache(id[i]) .. \")\"\r\n\t\telse\r\n\t\t\tnames = names .. self:getNameInCache(id[i])\r\n\t\tend\r\n\tend\r\n\treturn names\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Vérification des batteries\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:batteries(value, concatroom)\r\n\tlocal res = false\r\n\tlocal names, rooms = \"\", \"\"\r\n\tfor _, v in ipairs(fibaro.getDevicesID({interface=\"battery\", visible=true})) do\r\n\t\tlocal bat = fibaro.getValue(v, 'batteryLevel')\r\n\t\tlocal low = tonumber(bat) < tonumber(value)\r\n\t\tif low then\r\n\t\t\tif names ~= \"\" then names = names .. \", \" end\r\n\t\t\tnames = names .. \"[\"..v..\"] \" .. self:getName(v, concatroom)\r\n\t\t\tif rooms ~= \"\" then rooms = rooms .. \", \" end\r\n\t\t\trooms = rooms .. self:getRoomInCache(v)\r\n\t\tend\r\n\t\tres = res or low\r\n\tend\r\n\treturn res, names, rooms\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Recherche et retourne une option (condition ou action) encapsulée\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getOption(object, silent)\r\n--print(\"GEA:getOption(\"..json.encode(object)..\", \"..tostring(silent)..\")\") -- DEBUG\r\n\tlocal sname = \"\"\r\n\tlocal tname = type(object)\r\n\tlocal originalName = object\r\n\tif tname == \"table\" then\r\n\t\tsname = string.lower(tostring(object[1])):gsub(\"!\", \"\"):gsub(\"+\", \"\"):gsub(\"-\", \"\"):gsub(\"%(\", \"\"):gsub(\"%)\", \"\") -- Modifié par Lazer\r\n\t\toriginalName = object[1]\r\n\telse\r\n\t\tsname = string.lower(tostring(object)):gsub(\"!\", \"\"):gsub(\"+\", \"\"):gsub(\"-\", \"\"):gsub(\"%(\", \"\"):gsub(\"%)\", \"\")\r\n\tend\r\n--tools.error(\"GEA:getOption() sname (\" .. type(sname) .. \") \" .. tostring(sname) .. \" -  tname (\" .. type(tname) .. \") \" .. tostring(tname)) -- DEBUG\r\n\tif sname~=\"function\" then\r\n\t\tlocal jo = json.encode(object)\r\n--tools.error(\"GEA:getOption() jo (\" .. type(jo) .. \") \" .. tostring(jo)) -- DEBUG\r\n\t\tif self.declared[jo] then return self.declared[jo] end\r\n\tend\r\n\tlocal option = nil\r\n\tif tonumber(sname) or tonumber(self:findDeviceId(sname, true)) then tname = \"number\" object = tonumber(self:findDeviceId(sname, true)) end\r\n\tif tname==\"number\" or tname==\"boolean\" then\r\n\t\toption = self.options[tname]\r\n\t\toption.name = object\r\n\t\toriginalName = tostring(originalName)\r\n\t\tobject = {object}\r\n\t\tsname = tname\r\n\telse\r\n\t\tif sname == \"function\" then sname = \"fonction\" end\r\n\t\tif sname == \"repeat\" then sname = \"repe_t\" end\r\n\t\tif sname == \"or\" then sname = \"o_r\" end\r\n\t\toption = self.options[sname]\r\n\tend\r\n--tools.error(\"GEA:getOption() sname (\" .. type(sname) .. \") \" .. tostring(sname) .. \" -  tname (\" .. type(tname) .. \") \" .. tostring(tname)) -- DEBUG\r\n\tif option then\r\n\t\tself.options_id = self.options_id + 1\r\n\t\tif self.nbRun < 1 then table.insert(self.usedoptions, sname) end\r\n\t\tlocal o = self:encapsule(option, object, originalName:find(\"!\"), originalName:find(\"+\"), originalName:find(\"-\"), self.options_id, originalName:find(\"%(\") and originalName:find(\"%)\"))\r\n\t\tif jo then self.declared[jo] = o end\r\n\t\treturn o\r\n\tend\r\n\tif not silent then\r\n\t\ttools.error(string.format(self.trad.option_missing, tools.convertToString(originalName)), \"red\")\r\n\t\t--fibaro:abort()\r\n\t\ttools.error(\"GEA:getOption() => Restart QuickApp\", \"red\")\r\n\t\tplugin.restart()\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Encapsulation d'une option (condition ou action)\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:encapsule(option, args, inverse, plus, moins, option_id, not_immediat)\r\n--tools.warning(\"copy.encapsule() option_id = \" .. tostring(option_id)) -- DEBUG\r\n--for k, v in pairs(option) do tools.warning(\"copy.encapsule() option k=\"..tostring(k)..\" - v (\"..type(v)..\")=\"..tostring(v)) end -- DEBUG\r\n\tlocal copy = {}\r\n\tcopy.lastRunAt = 0\r\n\tcopy.option_id = option_id\r\n\tcopy.name = self:findDeviceId(option.name, true)\r\n--tools.debug(\"GEA:encapsule() option.name = (\" .. type(option.name) .. \") \" .. tostring(option.name) .. \" - copy.name = (\" .. type(copy.name) .. \") \" .. tostring(copy.name)) -- DEBUG\r\n\tcopy.args = {table.unpack(args)}\r\n\tcopy.inverse = inverse\r\n\tcopy.not_immediat = not_immediat\r\n\tif copy.args and #copy.args>0 then\r\n\t\ttable.remove(copy.args, 1)\r\n\tend\r\n\tcopy.getLog = function()\r\n\t\t\t\t\t\t\t\t\tlocal params = \"]\"\r\n\t\t\t\t\t\t\t\t\tif #copy.args>0 then\r\n\t\t\t\t\t\t\t\t\t\tif copy.name:lower() == \"function\" then\r\n\t\t\t\t\t\t\t\t\t\t\tparams = \", {...}\" .. params\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tparams = \", \" .. tools.convertToString(copy.args) .. params\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\treturn \"[\"..tostring(copy.name) .. tools.iif(copy.inverse, \"!\", \"\") .. tools.iif(plus, \"+\", \"\") .. tools.iif(moins, \"-\", \"\") .. params\r\n\t\t\t\t\t\t\t\tend\r\n\tcopy.lastvalue = \"\"\r\n\tcopy.lastDisplayValue = \"\"\r\n\tcopy.hasValue = type(option.getValue)==\"function\" or false\r\n\tcopy.hasAction = type(option.action)==\"function\" or false\r\n\tcopy.hasControl = type(option.control)==\"function\" or false\r\n\tcopy.getModuleName = function() if option.getName then return option.getName(copy.searchValues()) end local id = copy.getId() return self:getNameInCache(id) end\r\n\tcopy.getModuleRoom = function() if option.getRoom then return option.getRoom(copy.searchValues()) end local id = copy.getId() return self:getRoomInCache(id) end\r\n\tcopy.getId = function()\r\n\t\t\t\t\t\t\t\t\tif copy.not_immediat then return \"\" end\r\n\t\t\t\t\t\t\t\t\tif type(copy.name)==\"boolean\" then\r\n\t\t\t\t\t\t\t\t\t\treturn copy.name\r\n\t\t\t\t\t\t\t\t\telseif type(copy.name)==\"number\" then\r\n\t\t\t\t\t\t\t\t\t\treturn copy.name\r\n\t\t\t\t\t\t\t\t\telseif type(copy.name)==\"function\" then\r\n\t\t\t\t\t\t\t\t\t\treturn nil\r\n\t\t\t\t\t\t\t\t\telseif self.plugins[copy.name] then\r\n\t\t\t\t\t\t\t\t\t\treturn self.currentEntry.id .. \"@\" .. copy.option_id\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tif copy.name == \"Or\" or copy.name == \"XOr\" then\r\n\t\t\t\t\t\t\t\t\t\t\tlocal ids = {}\r\n\t\t\t\t\t\t\t\t\t\t\tfor i=1, #copy.args do table.insert(ids, self:getOption(copy.args[i]).getId()) end\r\n\t\t\t\t\t\t\t\t\t\t\treturn ids\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tif copy.args[1] then return self:findDeviceId(copy.args[1], true) end\r\n\t\t\t\t\t\t\t\t\t\treturn nil\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\tcopy.searchValues = function()\r\n--tools.error(\"copy.searchValues()\") -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\tif type(copy.name)==\"boolean\" then\r\n--tools.error(\"copy.searchValues() boolean : \" .. tostring(copy.name)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn copy.name\r\n\t\t\t\t\t\t\t\t\t\t\t\telseif type(copy.name)==\"number\" then\r\n--tools.error(\"copy.searchValues() number : \" .. tostring(copy.name)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn copy.name\r\n\t\t\t\t\t\t\t\t\t\t\t\telse\r\n--tools.error(\"copy.searchValues() else for\") -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal results = {}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor i = 1, #args do\r\n--tools.error(\"copy.searchValues() i=\" .. i) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif type(args[i]) == \"table\" and not option.keepValues and i >= 2 then\r\n--tools.error(\"copy.searchValues() table\") -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal tableNumber = false\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif tonumber(args[i][1]) then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttableNumber = true\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal o = self:getOption(args[i], true)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif o and not tableNumber then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal v = o.getValue()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttable.insert(results, v)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttable.insert(results, args[i])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\r\n--tools.error(\"copy.searchValues() else table.insert args[i] = \" .. args[i]) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttable.insert(results, args[i])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif results and #results>0 then table.remove(results, 1) end\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn table.unpack(results)\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t--copy.control = function() if self.control and copy.hasControl then return option.control(copy.searchValues()) else return true end end\r\n\tcopy.control = function() -- Lazer\r\n\t\t\t\t\t\t\t\t\t\t\tif self.control and copy.hasControl then\r\n\t\t\t\t\t\t\t\t\t\t\t\tlocal ok, val1, val2 = pcall(option.control, copy.searchValues())\r\n\t\t\t\t\t\t\t\t\t\t\t\tif ok then\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn val1, val2\r\n\t\t\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn false, val1\r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\tcopy.action = function() if copy.hasAction then copy.lastRunAt=0; return option.action(copy.searchValues()) else tools.warning(string.format(self.trad.not_an_action, copy.name)) return nil end end\r\n\tcopy.getValue = function()\r\n--tools.warning(\"copy.getValue()\") -- DEBUG\r\n--tools.warning(\"copy.getValue() copy.hasValue=\" .. tostring(copy.hasValue) .. \" - copy.lastvalue, copy.lastDisplayValue = \" .. tostring(copy.lastvalue) .. \", \" .. tostring(copy.lastDisplayValue)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\tif not copy.hasValue then\r\n\t\t\t\t\t\t\t\t\t\t\t--tools.warning(\"copy.getValue() return nil\") -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tif copy.lastRunAt == self.runAt and copy.lastvalue and (not self.forceRefreshValues) then\r\n--tools.warning(\"copy.getValue() 1 return copy.lastvalue, copy.lastDisplayValue :\" .. tostring(copy.lastvalue) .. \", \" .. tostring(copy.lastDisplayValue)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\t\treturn copy.lastvalue, copy.lastDisplayValue\r\n\t\t\t\t\t\t\t\t\t\tend\r\n--tools.warning(\"copy.getValue() type(copy.name) = \" .. type(copy.name)) -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\tif type(args[2])==\"function\" then\r\n\t\t\t\t\t\t\t\t\t\t\tcopy.lastvalue, copy.lastDisplayValue = args[2]()\r\n\t\t\t\t\t\t\t\t\t\telseif type(copy.name)==\"boolean\" then\r\n\t\t\t\t\t\t\t\t\t\t\tcopy.lastvalue, copy.lastDisplayValue = self.options.boolean.getValue(copy.name)\r\n\t\t\t\t\t\t\t\t\t\telseif type(copy.name)==\"number\" then\r\n\t\t\t\t\t\t\t\t\t\t\tcopy.lastvalue, copy.lastDisplayValue = self.options.number.getValue(copy.name)\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tcopy.lastvalue, copy.lastDisplayValue = option.getValue(copy.searchValues())\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tcopy.lastRunAt = self.runAt\r\n\t\t\t\t\t\t\t\t\t\tif not copy.lastDisplayValue or copy.lastDisplayValue == \"\" then copy.lastDisplayValue = copy.lastvalue end\r\n\t\t\t\t\t\t\t\t\t\tif self.lldebug then tools.warning(\"copy.getValue() 2 return copy.lastvalue, copy.lastDisplayValue : (\"..type(copy.lastvalue)..\") \" .. tostring(copy.lastvalue) .. \", (\"..type(copy.lastDisplayValue)..\") \" .. tostring(copy.lastDisplayValue), \"pink\") end -- DEBUG\r\n\t\t\t\t\t\t\t\t\t\treturn copy.lastvalue, copy.lastDisplayValue\r\n\t\t\t\t\t\t\t\t\tend\r\n\tcopy.check = function() -- Modifié par Lazer\r\n\t\t\t\t\t\t\t\t\tlocal id, property, value, value2, value3, value4 = copy.searchValues()\r\n\t\t\t\t\t\t\t\t\tif not copy.hasValue then return true end\r\n\t\t\t\t\t\t\t\t\tif type(property) == \"nil\" then property = id end\r\n\t\t\t\t\t\t\t\t\tif type(value) == \"nil\" then value = property end\r\n\t\t\t\t\t\t\t\t\tif type(value2) == \"nil\" then value2 = value end\r\n\t\t\t\t\t\t\t\t\tif type(value3) == \"nil\" then value3 = value2 end\r\n\t\t\t\t\t\t\t\t\tif type(value4) == \"nil\" then value4 = value3 end\r\n\t\t\t\t\t\t\t\t\tif self.lldebug then tools.debug(\"copy.check() copy.name=\"..tostring(copy.name)..\" id=\"..tostring(id)..\" property=\"..tostring(property)..\" value=\"..tostring(value)..\" value2=\"..tostring(value2)..\" value3=\"..tostring(value3)..\" value4=\"..tostring(value4), \"silver\") end -- DEBUG\r\n\t\t\t\t\t\t\t\t\tlocal result = copy.getValue()\r\n\t\t\t\t\t\t\t\t\tif self.lldebug then tools.debug(\"copy.check() result = (\" .. type(result) .. \") \" .. tostring(result), \"silver\") end -- DEBUG\r\n\t\t\t\t\t\t\t\t\tlocal checked\r\n\t\t\t\t\t\t\t\t\tif type(copy.name) == \"number\" then\r\n\t\t\t\t\t\t\t\t\t\tif type(result) == \"boolean\" then\r\n\t\t\t\t\t\t\t\t\t\t\tchecked = result\r\n\t\t\t\t\t\t\t\t\t\telseif type(result) == \"number\" or type(result) == \"integer\" then\r\n\t\t\t\t\t\t\t\t\t\t\tchecked = result > 0\r\n\t\t\t\t\t\t\t\t\t\telseif type(result) == \"string\" then\r\n\t\t\t\t\t\t\t\t\t\t\tchecked = result ~= \"\"\r\n\t\t\t\t\t\t\t\t\t\telseif type(result) == \"table\" then\r\n\t\t\t\t\t\t\t\t\t\t\tchecked = #result > 0\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tchecked = result and true or false\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\telseif option.isBoolean then\r\n\t\t\t\t\t\t\t\t\t\tchecked = result\r\n\t\t\t\t\t\t\t\t\telseif plus or moins then\r\n\t\t\t\t\t\t\t\t\t\tif tools.isNil(option.math) then\r\n\t\t\t\t\t\t\t\t\t\t\ttools.error(string.format(self.trad.not_math_op, copy.name), \"red\")\r\n\t\t\t\t\t\t\t\t\t\t\treturn false, result\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tlocal num1 = tonumber(string.match(value4, \"-?[0-9.]+\"))\r\n\t\t\t\t\t\t\t\t\t\t\tlocal num2 = tonumber(string.match(result, \"-?[0-9.]+\"))\r\n\t\t\t\t\t\t\t\t\t\t\tif plus then\r\n\t\t\t\t\t\t\t\t\t\t\t\tchecked = num2 > num1\r\n\t\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\t\tchecked = num2 < num1\r\n\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\telseif type(value4) == \"table\" then\r\n\t\t\t\t\t\t\t\t\t\tchecked = self:compareTable(result, value4)\r\n\t\t\t\t\t\t\t\t\telseif type(value4) == \"function\" then\r\n\t\t\t\t\t\t\t\t\t\tchecked = value4()\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tchecked = self:compareString(result, value4)\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\tlocal forceInverse = false\r\n\t\t\t\t\t\t\t\t\tif self.currentEntry and self.currentEntry.inverse[self.currentEntry.id..\"-\"..copy.option_id] then\r\n\t\t\t\t\t\t\t\t\t\tforceInverse = true\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\tif copy.inverse or forceInverse then\r\n\t\t\t\t\t\t\t\t\t\treturn not checked, result\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn checked, result\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\tcopy.hasTrigger = type(option.trigger) == \"function\" or false -- Lazer\r\n\tcopy.eventTrigger = function() -- Lazer\r\n\t\t\t\t\t\t\t\t\tif copy.hasTrigger then\r\n\t\t\t\t\t\t\t\t\t\tlocal ok, val = pcall(option.trigger, copy.searchValues())\r\n\t\t\t\t\t\t\t\t\t\tif ok then\r\n\t\t\t\t\t\t\t\t\t\t\treturn val\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\treturn nil, val\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn nil, string.format(self.trad.not_a_trigger, copy.name)\r\n\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tend\r\n\treturn copy\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Compare 2 chaînes de caractères (autorise les regex)\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:compareString(s1, s2)\r\n\ts1 = self:replaceChar(tostring(s1):lower())\r\n\ts2 = self:replaceChar(tostring(s2):lower())\r\n\tif s2:find(\"#r#\") then\r\n\t\ts2 = s2:gsub(\"#r#\", \"\")\r\n\t\tlocal res = false\r\n\t\tfor _, v in pairs(tools.split(s2, \"|\")) do\r\n\t\t\tres = res or tostring(s1):match(tools.trim(v))\r\n\t\tend\r\n\t\treturn res\r\n\tend\r\n\treturn tostring(s1) == tostring(s2)\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Compare 2 tableaux récursivement\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:compareTable(t1, t2)\r\n\tlocal typ1 = type(t1)\r\n\tlocal typ2 = type(t2)\r\n\tif typ1 ~= typ2 then return false end\r\n\tif typ1 ~= 'table' and typ2 ~= 'table' then return t1 == t2 end\r\n\tfor k1, v1 in pairs(t1) do\r\n\t\tlocal v2 = t2[k1]\r\n\t\tif v2 == nil or not self:compareTable(v1, v2) then return false end\r\n\tend\r\n\tfor k2, v2 in pairs(t2) do\r\n\t\tlocal v1 = t1[k2]\r\n\t\tif v1 == nil or not self:compareTable(v1, v2) then return false end\r\n\tend\r\n\treturn true\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Remplacement des caractères spéciaux\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:replaceChar(s)\r\n\treturn s:gsub(\"Ã \", \"à\"):gsub(\"Ã©\", \"é\"):gsub(\"Ã¨\", \"è\"):gsub(\"Ã®\", \"î\"):gsub(\"Ã´\", \"ô\"):gsub(\"Ã»\", \"û\"):gsub(\"Ã¹\", \"ù\"):gsub(\"Ãª\", \"ê\"):gsub(\"Ã¢\",\"â\"):gsub(\" ' \", \"'\")\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Trie un tableau selon sa propriété\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:table_sort(t, property)\r\n\tlocal new1, new2 = {}, {}\r\n\tfor k,v in pairs(t) do table.insert(new1, { key=k, val=v } ) end\r\n\ttable.sort(new1, function (a,b) return (a.val[property] < b.val[property]) end)\r\n\tfor _,v in pairs(new1) do table.insert(new2, v.val) end\r\n\treturn new2\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne year, month, days selon un format spécifique\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getDateParts(date_str, date_format)\r\n\tlocal d,m,y = date_format:find(\"dd\"), date_format:find(\"mm\"), date_format:find(\"yy\")\r\n\tlocal arr = { { pos=y, b=\"yy\" }, { pos=m, b=\"mm\" } , { pos=d, b=\"dd\" }  }\r\n\tarr = self:table_sort(arr, \"pos\")\r\n\tdate_format = date_format:gsub(\"yyyy\",\"(%%d+)\"):gsub(\"yy\",\"(%%d+)\"):gsub(\"mm\",\"(%%d+)\"):gsub(\"dd\",\"(%%d+)\"):gsub(\" \",\"%%s\")\r\n\tif date_str and date_str~=\"\" then\r\n\t\t_, _, arr[1].c, arr[2].c, arr[3].c = string.find(string.lower(date_str), date_format)\r\n\telse\r\n\t\treturn nil, nil, nil\r\n\tend\r\n\tarr = self:table_sort(arr, \"b\")\r\n\treturn tonumber(arr[3].c), tonumber(arr[2].c), tonumber(arr[1].c)\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Gestion des inc+ et dec-\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:incdec(value, oldvalue)\r\n\tif type(value) ~= \"string\" then return value end\r\n\tif value:find(\"inc%+\") or value:find(\"dec%-\") then\r\n\t\tlocal num = value:match(\"%d+\") or 1\r\n\t\tlocal current = tonumber(oldvalue) or 0\r\n\t\tif value:find(\"inc%+\") then value = current + num else value = current - num end\r\n\tend\r\n\treturn value\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Converti un nombre de secondes en un format expressif\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getDureeInString(nbSecondes)\r\n\tlocal dureefull = \"\"\r\n\tlocal duree = \"\"\r\n\tnHours = math.floor(nbSecondes/3600)\r\n\tnMins = math.floor(nbSecondes/60 - (nHours*60))\r\n\tnSecs = math.floor(nbSecondes - nHours*3600 - nMins *60)\r\n\tif nHours > 0 then\r\n\t\tduree = duree .. nHours .. \"h \"\r\n\t\tdureefull = dureefull .. nHours\r\n\t\tif nHours > 1 then dureefull = dureefull .. \" \" .. self.trad.hours else dureefull = dureefull .. \" \" .. self.trad.hour end\r\n\tend\r\n\tif nMins > 0 then\r\n\t\tduree = duree .. nMins .. \"m \"\r\n\t\tif nHours > 0 then dureefull = dureefull .. \" \" end\r\n\t\tif nSecs == 0 and nHours > 0 then dureefull = dureefull .. \"et \" end\r\n\t\tdureefull = dureefull .. nMins\r\n\t\tif nMins > 1 then dureefull = dureefull .. \" \" .. self.trad.minutes else dureefull = dureefull .. \" \" .. self.trad.minute end\r\n\tend\r\n\tif nSecs > 0 then\r\n\t\tduree = duree.. nSecs .. \"s\"\r\n\t\tif nMins > 0 then dureefull = dureefull .. \" \" .. self.trad.andet .. \" \" end\r\n\t\tdureefull = dureefull .. nSecs\r\n\t\tif nSecs > 1 then dureefull = dureefull .. \" \" .. self.trad.seconds else dureefull = dureefull .. \" \"  .. self.trad.second end\r\n\tend\r\n\treturn duree, dureefull\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne les heures au bon format si besoin\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:flatTimes(from, to)\r\n\treturn self:flatTime(from, false), self:flatTime(to, to==from)\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retourne une heure au bon format si besoin\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:flatTime(time, force)\r\n\r\n\tlocal t = time:lower()\r\n\tt = t:gsub(\" \", \"\"):gsub(\"h\", \":\"):gsub(\"sunset\", fibaro.getValue(1, \"sunsetHour\")):gsub(\"sunrise\", fibaro.getValue(1, \"sunriseHour\"))\r\n\r\n\tif string.find(t, \"<\") then\r\n\t\tt = self:flatTime(tools.split(t, \"<\")[1])..\"<\"..self:flatTime(tools.split(t, \"<\")[2])\r\n\tend\r\n\tif string.find(t, \">\") then\r\n\t\tt = self:flatTime(tools.split(t, \">\")[1])..\">\"..self:flatTime(tools.split(t, \">\")[2])\r\n\tend\r\n\r\n\tlocal td = os.date(\"*t\", self.runAt)\r\n\tif string.find(t, \"+\") then\r\n\t\tlocal time = tools.split(t, \"+\")[1]\r\n\t\tlocal add = tools.split(t, \"+\")[2]\r\n\t\tlocal sun = os.time{year=td.year, month=td.month, day=td.day, hour=tonumber(tools.split(time, \":\")[1]), min=tonumber(tools.split(time, \":\")[2]), sec=td.sec}\r\n\t\tsun = sun + (add *60)\r\n\t\tt = os.date(\"*t\", sun)\r\n\t\tt =  string.format(\"%02d\", t.hour).. \":\" ..string.format(\"%02d\", t.min)\r\n\telseif string.find(t, \"-\") then\r\n\t\tlocal time = tools.split(t, \"-\")[1]\r\n\t\tlocal add = tools.split(t, \"-\")[2]\r\n\t\tlocal sun = os.time{year=td.year, month=td.month, day=td.day, hour=tonumber(tools.split(time, \":\")[1]), min=tonumber(tools.split(time, \":\")[2]), sec=td.sec}\r\n\t\tsun = sun - (add *60)\r\n\t\tt = os.date(\"*t\", sun)\r\n\t\tt =  string.format(\"%02d\", t.hour)..\":\" ..string.format(\"%02d\", t.min)\t\t\t\r\n\telseif string.find(t, \"<\") then\r\n\t\tlocal s1 = tools.split(t, \"<\")[1]\r\n\t\tlocal s2 = tools.split(t, \"<\")[2]\r\n\t\ts1 =  string.format(\"%02d\", tools.split(s1, \":\")[1]) .. \":\" .. string.format(\"%02d\", tools.split(s1, \":\")[2])\r\n\t\ts2 =  string.format(\"%02d\", tools.split(s2, \":\")[1]) .. \":\" .. string.format(\"%02d\", tools.split(s2, \":\")[2])\r\n\t\tif s1 < s2 then t = s1 else t = s2 end\r\n\telseif string.find(t, \">\") then\r\n\t\tlocal s1 = tools.split(t, \">\")[1]\r\n\t\tlocal s2 = tools.split(t, \">\")[2]\r\n\t\ts1 =  string.format(\"%02d\", tools.split(s1, \":\")[1]) .. \":\" .. string.format(\"%02d\", tools.split(s1, \":\")[2])\r\n\t\ts2 =  string.format(\"%02d\", tools.split(s2, \":\")[1]) .. \":\" .. string.format(\"%02d\", tools.split(s2, \":\")[2])\r\n\t\tif s1 > s2 then t = s1 else t = s2 end\r\n\telse\r\n\t\tt =  string.format(\"%02d\", tools.split(t, \":\")[1]) .. \":\" .. string.format(\"%02d\", tools.split(t, \":\")[2])\r\n\tend\r\n\r\n\tif force then\r\n\t\tif self.currentEntry.firstvalid then\r\n\t\t\tlocal td = os.date(\"*t\", self.currentEntry.firstvalid)\r\n\t\t\tlocal sun = os.time{year=td.year, month=td.month, day=td.day, hour=td.hour, min=td.min, sec=td.sec}\r\n\t\t\tsun = sun + self.currentEntry.getDuration()\r\n\t\t\tt = os.date(\"*t\", sun)\t\r\n\t\t\treturn string.format(\"%02d\", t.hour).. \":\" ..string.format(\"%02d\", t.min)..\":\" ..string.format(\"%02d\", t.sec)\r\n\t\tend\r\n\tend\r\n\treturn t .. \":\" ..string.format(\"%02d\", td.sec)\r\n\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Contrôle des heures\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:checkTime(from, to)\r\n\tlocal now = os.date(\"%H%M%S\", self.runAt)\r\n\tfrom, to = self:flatTimes(from, to)\r\n\tfrom = from:gsub(\":\", \"\")\r\n\tto = to:gsub(\":\", \"\")\r\n\tif to < from then\r\n\t\treturn (now >= from) or (now <= to)\r\n\telse\r\n\t\treturn (now >= from) and (now <= to)\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Contrôle des dates\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:checkDates(from, to)\r\n\tlocal now = os.date(\"%Y%m%d\", self.runAt)\r\n\tto = to or from\r\n\tlocal d,m,y = to:match(\"(%d+).(%d+).(%d+)\")\r\n\tlocal missingYear = false\r\n\tif not y then to = to .. self.trad.input_date_format:match(\"[/,.]\") .. os.date(\"%Y\", self.runAt) missingYear = true end\r\n\tlocal toy, tom, tod = self:getDateParts(to, self.trad.input_date_format)\r\n\td,m,y = from:match(\"(%d+).(%d+).(%d+)\")\r\n\tif not y then from = from .. self.trad.input_date_format:match(\"[/,.]\") .. os.date(\"%Y\", self.runAt) end\r\n\tlocal fromy, fromm, fromd = self:getDateParts(from, self.trad.input_date_format)\r\n\tfrom = string.format (\"%04d\", fromy) ..string.format (\"%02d\", fromm)..string.format (\"%02d\", fromd)\r\n\tto = string.format (\"%04d\", toy) ..string.format (\"%02d\", tom)..string.format (\"%02d\", tod)\r\n\tif tonumber(string.format (\"%02d\", tom)..string.format (\"%02d\", tod)) < tonumber(string.format (\"%02d\", fromm)..string.format (\"%02d\", fromd)) and missingYear then\r\n\t\tto = string.format (\"%04d\", toy+1) ..string.format (\"%02d\", tom)..string.format (\"%02d\", tod)\r\n\tend\r\n\treturn tonumber(now) >= tonumber(from) and tonumber(now) <= tonumber(to)\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Contrôle des jours\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:checkDays(days)\r\n\tif not days or days==\"\" then days = \"All\" end\r\n\tdays = days:lower()\r\n\tlocal jours = days:gsub(\"all\", \"weekday,weekend\")\r\n\tjours = jours:gsub(self.trad.weekdays, self.traduction.en.weekdays):gsub(self.trad.weekend, self.traduction.en.weekend)\r\n\tjours = jours:gsub(self.trad.week[1], self.traduction.en.week[1]):gsub(self.trad.week[2], self.traduction.en.week[2]):gsub(self.trad.week[3], self.traduction.en.week[3]):gsub(self.trad.week[4], self.traduction.en.week[4]):gsub(self.trad.week[5], self.traduction.en.week[5]):gsub(self.trad.week[6], self.traduction.en.week[6]):gsub(self.trad.week[7], self.traduction.en.week[7])\r\n\tjours = jours:gsub(\"weekday\", \"monday,tuesday,wednesday,thursday,friday\"):gsub(\"weekdays\", \"monday,tuesday,wednesday,thursday,friday\"):gsub(\"weekend\", \"saturday,sunday\")\r\n\treturn tools.isNotNil(string.find(jours:lower(), os.date(\"%A\", self.runAt):lower()))\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Traite les entrées spéciales avant de l'ajouter dans le tableau\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:insert(t, v, entry)\r\n\tif not v then return end -- Lazer\r\n\tlocal action = tostring(v.name):lower()\r\n\tif action == \"repeat\" then entry.repeating = true return end\r\n\tif action == \"notstart\" then entry.stopped = true return end\r\n\tif action == \"portables\" then entry.portables = v.args[1] return end\r\n\tif action == \"portable\" or action == \"push\" then entry.portables = {} end\r\n\tif action == \"inverse\" then local num = v.args[1] or 1 entry.inverse[entry.id..\"-\"..entry.conditions[num].option_id] = true return end\r\n\tif action == \"time\" then if not entry.ortime then entry.ortime = {\"Or\", {\"Time\", v.args[1], v.args[2]}} else table.insert(entry.ortime, {\"Time\", v.args[1], v.args[2]}) end return end\r\n\tif action == \"dates\" then if not entry.ordates then entry.ordates = {\"Or\", {\"Dates\", v.args[1], v.args[2]}} else table.insert(entry.ordates, {\"Dates\", v.args[1], v.args[2]}) end return end\r\n\tif action == \"maxtime\" then\r\n\t\tlocal time = self.options.maxtime.getValue(entry.id)\r\n\t\tif time and tonumber(time) < 1 then\r\n\t\t\tentry.stopped = true\r\n\t\telse\r\n\t\t\tentry.maxtime = v.args[1]\r\n\t\t\tentry.repeating = true\r\n\t\tend\r\n\t\treturn\r\n\tend\r\n\tif action == \"alarm\" then entry.duration = 30 entry.getDuration = function() return 30 end entry.repeating = true end\r\n\tif action == \"depend\" then table.insert(self:findEntry(v.args[1]).listeners, entry.id) entry.isWaiting[v.args[1]]=true end\r\n\ttable.insert(t, v)\r\n\treturn true\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Ajoute dans l'historique\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:addHistory(message)\r\n\tif not self.auto then return end\r\n\tif not self.history then self.history = {} end\r\n\tif #self.history >= self.historymax then\r\n\t\tfor i = 1, (#self.history-1) do\r\n\t\t\tself.history[i] = self.history[i+1]\r\n\t\tend\r\n\t\tself.history[#self.history] = nil\r\n\tend\r\n\tself.history[(#self.history+1)] = os.date(self.trad.hour_format, self.runAt) .. \" : \" .. message:gsub(\"<\", \"\"):gsub(\">\", \"\")\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Ajoute un déclencheur instantané -- Lazer\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:addTriggerCondition(o)\r\n\tlocal option = self:getOption(o)\r\n\tif type(option) == \"table\" then\r\n\t\t--tools.info(\"addTriggerCondition() option[\"..#option..\"]\")\r\n\t\t--for k, v in pairs(option) do tools.info(\"addTriggerCondition() option : k = \" .. k .. \" - v = \" .. type(v) .. \" => \" .. tostring(v)) end -- DEBUG\r\n\t\tif option.hasTrigger and not option.not_immediat then\r\n\t\t\tlocal eventTrigger, msg = option.eventTrigger()\r\n\t\t\t--tools.info(\"addTriggerID() eventTrigger => \" .. json.encode(eventTrigger)) -- DEBUG\r\n\t\t\tif type(eventTrigger) == \"table\" then\r\n\t\t\t\t--for k, v in pairs(eventTrigger) do tools.info(\"addTriggerID() eventTrigger : \" .. tostring(k) .. \" = \" .. tostring(v)) end -- DEBUG\r\n\t\t\t\tlocal found = false\r\n\t\t\t\tfor i = 1, #triggers do\r\n\t\t\t\t\t--tools.info(\"addTriggerID() triggers[\" .. tostring(i) .. \"] => \" .. json.encode(triggers[i])) -- DEBUG\r\n\t\t\t\t\t\tif self:compareTable(triggers[i], eventTrigger) then\r\n\t\t\t\t\t\t\tfound = true\r\n\t\t\t\t\t\t\t--tools.debug(\"addTriggerID() eventTrigger already exists\") -- DEBUG\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tif not found then\r\n\t\t\t\t\ttriggers[#triggers+1] = eventTrigger\r\n\t\t\t\t\t--tools.debug(\"addTriggerID() added : \" .. json.encode(triggers[#triggers])) -- DEBUG\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\ttools.error(msg, \"red\")\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Retrouve une entry selon son ID\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:findEntry(entryId)\r\n\tfor i = 1, #self.entries do\r\n\t\tif self.entries[i].id == tonumber(entryId) then return self.entries[i] end\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Permet l'ajout des entrées à traiter\r\n-- c : conditions\r\n-- d : durée\r\n-- m : message\r\n-- a : actions\r\n-- l : log\r\n-- --------------------------------------------------------------------------------\r\nGEA.add = function(c, d, m, a, l) -- Conservé pour compatibilité des règles utilisateurs sur HC2\r\n\tif GEA_event then\r\n\t\tGEA_event:addEntry(c, d, m, a, l)\r\n\telseif GEA_auto then\r\n\t\tGEA_auto:addEntry(c, d, m, a, l)\r\n\telse\r\n\t\t-- n'est jamais censé se produire\r\n\t\ttools.error(\"GEA_event or GEA_auto not found\", \"red\")\r\n\tend\r\nend\r\n\r\nfunction GEA:addEntry(c, d, m, a, l)\r\n\r\n\tif not c then tools.error(self.trad.err_cond_missing, \"red\") return end\r\n\tif not d then tools.error(self.trad.err_dur_missing, \"red\") return end\r\n\tif not m then tools.error(self.trad.err_msg_missing, \"red\") return end\r\n\r\n\tself.id_entry = self.id_entry + 1\r\n--tools.warning(\"#\" .. self.id_entry .. \" self:add(\" .. json.encode(c) .. \", \" .. tostring(d) .. \", \\\"\" .. tostring(m) .. \"\\\", \" .. json.encode(a) .. \")\") -- DEBUG\r\n\r\n\tif type(a) == \"string\" and type(l) == \"nil\" then\r\n\t\tl = a\r\n\t\ta = nil\r\n\tend\r\n\r\n\tlocal entry = {\r\n\t\tid = self.id_entry,\r\n\t\tconditions = {},\r\n\t\tduration = d,\r\n\t\tmessage = m,\r\n\t\tactions = {},\r\n\t\trepeating = false,\r\n\t\tmaxtime = -1,\r\n\t\tcount = 0,\r\n\t\tstopped = false,\r\n\t\tlisteners = {},\r\n\t\tisWaiting = {},\r\n\t\tfirstvalid = nil,\r\n\t\tlastvalid = nil,\r\n\t\trunned = false,\r\n\t\tlog = \"#\" .. self.id_entry .. \" \" ..tools.iif(l, tools.tostring(l), \"\"),\r\n\t\tportables = self.portables,\r\n\t\tinverse = {}\r\n\t}\r\n\tentry.getDuration = function()\r\n\t\treturn self:getDuree(entry.duration)\r\n\tend\r\n\t-- entrée inutile, on retourne juste l'id pour référence\r\n\tif not self.auto and entry.getDuration() >= 0 then\r\n--tools.warning(\"self:add() not self.auto\") -- DEBUG\r\n\t\treturn entry.id\r\n\tend\r\n\tif self.auto and entry.getDuration() < 0 then\r\n\t\t-- Lazer : Recherche les déclencheurs dans les conditions\r\n\t\tif type(c) == \"table\" and (type(c[1]) == \"table\" or type(c[1]) == \"number\" or c[1]:find(\"%d+!\") or type(c[1]) == \"boolean\") then\r\n\t\t\tfor i = 1, #c do\r\n\t\t\t\tself:addTriggerCondition(c[i])\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tself:addTriggerCondition(c)\r\n\t\tend\r\n\r\n--tools.warning(\"self:add() getDuration < 0\") -- DEBUG\r\n\t\treturn entry.id\r\n\tend\r\n\tif self.source[\"type\"] == \"manual\" then\r\n--tools.warning(\"self:add() source[type] manual\") -- DEBUG\r\n\t\treturn entry.id\r\n\tend\r\n\r\n\tself.currentEntry = entry\r\n\r\n\t-- traitement des conditions\r\n\tentry.mainid = -1\r\n\tlocal done = false\r\n\tif type(c) == \"table\" and (type(c[1]) == \"table\" or type(c[1]) == \"number\" or c[1]:find(\"%d+!\") or type(c[1]) == \"boolean\") then\r\n\t\tfor i = 1, #c do\r\n--tools.warning(\"Condition n°\" .. i) -- DEBUG\r\n\t\t\tlocal res = self:insert(entry.conditions, self:getOption(c[i]), entry)\r\n\t\t\tdone = done or res\r\n\t\tend\r\n\telse\r\n--tools.warning(\"Condition\") -- DEBUG\r\n\t\tdone = self:insert(entry.conditions, self:getOption(c), entry)\r\n\tend\r\n\tif done then\r\n\t\tlocal mainid = entry.conditions[1].getId()\r\n\t\tif type(mainid) == \"table\" then\r\n\t\t\tentry.mainid = mainid[1]\r\n\t\telse\r\n--tools.debug(\"mainid : \" .. tostring(mainid)) -- DEBUG\r\n\tentry.mainid = mainid\r\n\t\tend\r\n\tend\r\n\r\n\t-- analyse des messages pour empêcher la suppression des options utilisées\r\n\tif self.auto then self:getMessage(m, true) end\r\n\r\n\t-- analyse du déclencheur\r\n\tif self.event and self.event.id then\r\n\t\t-- si le déclencheur est trouvé en recherche un id correspondant\r\n\t\tlocal found = false\r\n\t\tfor i = 1, #entry.conditions do\r\n--tools.debug(\"condition i : \" .. i) -- DEBUG\r\n\t\t\tlocal ids = entry.conditions[i].getId()\r\n--tools.debug(\"condition ids : \" .. json.encode(ids)) -- DEBUG\r\n\t\t\tif type(ids) == \"table\" then\r\n\t\t\t\tfor j = 1, #ids do\r\n\t\t\t\t\tif tostring(ids[j]) == tostring(self.event.id) and not self.event.label then found = true end\r\n\t\t\t\t\tif tostring(ids[j]) == tostring(self.event.id) and self.event.label then\r\n\t\t\t\t\t\t--if \"ui.\"..entry.conditions[i].args[2]:gsub(\"ui.\", \"\"):gsub(\".value\", \"\")..\".value\" == self.event.label then\r\n\t\t\t\t\t\tif entry.conditions[i].args[2] == self.event.label then -- Lazer\r\n\t\t\t\t\t\t\tfound = true\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telse\r\n--tools.debug(\"ID déclencheur : \" .. ids) -- DEBUG\r\n\t\t\t\tif tostring(ids) == tostring(self.event.id) and not self.event.label then found = true end\r\n\t\t\t\tif tostring(ids) == tostring(self.event.id) and self.event.label then\r\n\t\t\t\t\t--if \"ui.\"..entry.conditions[i].args[2]:gsub(\"ui.\", \"\"):gsub(\".value\", \"\")..\".value\" == self.event.label then\r\n\t\t\t\t\tif entry.conditions[i].args[2] == self.event.label then -- Lazer\r\n\t\t\t\t\t\tfound = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tif not found then --[[tools.warning(\"self:add() event not found\")--]] return entry.id end -- DEBUG\r\n\tend\r\n\r\n\t-- traitement des actions\r\n\tif a then\r\n\t\tif type(a) == \"table\" and type(a[1]) == \"table\" then\r\n\t\t\tfor i = 1, #a do\r\n\t\t\t\tif type(a[i]) == \"table\" and a[i][1]:lower()==\"if\" then\r\n\t\t\t\t\tself:insert(entry.conditions, self:getOption(a[i][2]), entry)\r\n\t\t\t\telseif type(a[i]) == \"table\" and self:compareString(a[i][1]:lower(), \"#r#^time|dates|days|dst|nodst|^armed|^disarmed\") then\r\n\t\t\t\t\tself:insert(entry.conditions, self:getOption(a[i]), entry)\r\n\t\t\t\telse\r\n\t\t\t\t\tself:insert(entry.actions, self:getOption(a[i]), entry)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tif type(a) == \"table\" and a[1]:lower()==\"if\" then\r\n\t\t\t\tself:insert(entry.conditions, self:getOption(a[2]), entry)\r\n\t\t\telseif type(a) == \"table\" and self:compareString(a[1]:lower(), \"#r#^time|dates|days|dst|nodst|^armed|^disarmed\") then\r\n\t\t\t\tself:insert(entry.conditions, self:getOption(a), entry)\r\n\t\t\telse\r\n\t\t\t\tself:insert(entry.actions, self:getOption(a), entry)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t-- gestion des heures et dates multiples\r\n\tif entry.ortime then if #entry.ortime > 2 then self:insert(entry.conditions, self:getOption(entry.ortime), entry) else table.insert(entry.conditions, self:getOption(entry.ortime[2])) end end\r\n\tif entry.ordates then if #entry.ordates > 2 then self:insert(entry.conditions, self:getOption(entry.ordates), entry) else table.insert(entry.conditions, self:getOption(entry.ordates[2])) end end\r\n\r\n\tlocal correct = true\r\n\tlocal erreur = \"\"\r\n\tfor i = 1,  #entry.conditions do\r\n\t\tentry.log = tools.iif(l, entry.log, entry.log .. entry.conditions[i].getLog())\r\n\t\tif self.auto then\r\n\t\t\t-- Contrôle des conditions\r\n\t\t\tself.currentMainId = entry.mainid\r\n\t\t\tself.currentCondition = entry.conditions[i]\r\n\t\t\tcheck, msg = entry.conditions[i].control()\r\n\t\t\tif not check then erreur = msg end\r\n\t\t\tif not entry.conditions[i].hasValue then\r\n\t\t\t\tcheck = false\r\n\t\t\t\terreur = string.format(self.trad.not_an_condition, entry.conditions[i].getLog())\r\n\t\t\tend\r\n\t\t\tcorrect = correct and check\r\n\t\tend\r\n\tend\r\n\r\n\tfor i = 1, #entry.actions do\r\n\t\tentry.log = tools.iif(l, entry.log, entry.log .. entry.actions[i].getLog())\r\n\t\tif self.auto then\r\n\t\t\t-- Contrôle des actions\r\n\t\t\tself.currentAction = entry.actions[i]\r\n\t\t\tcheck, msg = entry.actions[i].control()\r\n\t\t\tif not check then erreur = msg end\r\n\t\t\tif not entry.actions[i].hasAction then\r\n\t\t\t\tcheck = false\r\n\t\t\t\terreur = string.format(self.trad.not_an_action, entry.actions[i].getLog())\r\n\t\t\tend\r\n\t\t\tcorrect = correct and check\r\n\t\tend\r\n\tend\r\n\tentry.simplelog = entry.log\r\n\tentry.log = entry.log ..\"<font color=gray>\" .. tools.iif(entry.repeating, \" *\"..self.trad.repeated..\"*\", \"\") .. tools.iif(entry.stopped, \" *\"..self.trad.stopped..\"*\", \"\") .. tools.iif(entry.maxtime > 0, \" *\"..self.trad.maxtime..\"=\"..entry.maxtime..\"*\", \"\") .. \"</font>\"\r\n\r\n\tif correct then\r\n\t\tif self.auto then tools.info(self.trad.add_auto ..\" \".. entry.log) end\r\n\t\t\t--else tools.debug(\"Lazer : Ajout instantané\" ..\" \".. entry.log) end -- DEBUG\r\n\t\ttable.insert(self.entries, entry)\r\n--tools.warning(\"self:add() OK\") -- DEBUG\r\n\t\treturn entry.id\r\n\telse\r\n\t\ttools.error(tools.iif(entry.getDuration() < 0, self.trad.add_event ..\" \", self.trad.add_auto ..\" \") .. entry.log, \"red\")\r\n\t\ttools.error(erreur, \"red\")\r\n\t\t--tools.error(self.trad.gea_failed, \"red\")\r\n\t\t--fibaro:abort()\r\n\t\t--tools.error(\"self:add() => fibaro:abort()\", \"red\")\r\n\t\treturn\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Execute une function et attends un retour\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:waitWithTimeout(func, sleep, max)\r\n\tlocal ok, result = func()\r\n\twhile (not ok and max > 0) do\r\n\t\tfibaro.sleep(sleep)\r\n\t\tmax = max - sleep\r\n\t\tok, result = func()\r\n\tend\r\n\treturn result\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Vérifie une entrée pour s'assurer que toutes les conditions soient remplies\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:check(entry)\r\n\r\n\tif self.options.restarttask.getValue(entry.id) then\r\n\t\tself:reset(entry)\r\n\t\tself.stoppedTasks[entry.id] = nil\r\n\t\tself.globalvalue = self.globalvalue:gsub(\"|R_\" .. entry.id..\"|\", \"\"):gsub(\"|S_\" .. entry.id..\"|\", \"\"):gsub(\"|M_\" .. entry.id .. \"{(%d+)}|\", \"\")\r\n\tend\r\n\tif self.options.stoptask.getValue(entry.id) then entry.stopped = true end\r\n\r\n\tif entry.stopped then\r\n\t\tif not self.stoppedTasks[entry.id] then tools.debug(\"&nbsp;&nbsp;&nbsp;[\"..self.trad.stopped..\"] \" .. entry.log) end\r\n\t\tself.stoppedTasks[entry.id] = true\r\n\tend\r\n\r\n\t-- test des conditions\r\n\tlocal ready = true\r\n\tfor i = 1, #entry.conditions do\r\n--tools.error(\"i = \" .. i) -- DEBUG\r\n\t\tself.currentCondition = entry.conditions[i]\r\n--for k, v in pairs(entry.conditions[i]) do\r\n--tools.warning(\"k = \" .. k .. \" - v : \" .. type(v) .. \" => \" .. tostring(v)) -- DEBUG\r\n--end\r\n\t\tlocal result, _ = entry.conditions[i].check()\r\n\t\tif self.lldebug then tools.warning(\"GEA:check() result = \" .. tostring(result) .. \", \" .. tostring(_), \"blue\") end -- DEBUG\r\n\t\tready = ready and result\r\n\tend\r\n\r\n\tif not entry.stopped then tools.debug(\"@\" ..(self.nbRun*self.checkEvery) .. \"s [\"..self.trad.validate..tools.iif(ready, \"*] \", \"] \") .. entry.log) end\r\n\r\n\t-- si toutes les conditions sont validées\r\n\tif ready then\r\n--tools.error(\"ready\") -- DEBUG\r\n\t\tif entry.stopped then return end\r\n\t\tif tools.isNil(entry.lastvalid) then entry.lastvalid = self.runAt end\r\n\t\tif tools.isNil(entry.firstvalid) then entry.firstvalid = self.runAt end\r\n\t\tif os.difftime(self.runAt, entry.lastvalid) >= entry.getDuration() then\r\n\t\t\tentry.count = entry.count + 1\r\n\t\t\tentry.lastvalid = self.runAt\r\n\t\t\ttools.info(\"&nbsp;&nbsp;&nbsp;[\"..self.trad.start_entry..\"] \" .. entry.log, \"green\")\r\n\t\t\t-- gestion des actions\r\n\t\t\tfor i = 1, #entry.actions do\r\n\t\t\t\tself.currentAction = entry.actions[i]\r\n\t\t\t\ttools.debug(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\"..self.trad.action..\"] \" .. self:getMessage(entry.actions[i].getLog(), nil, true))\r\n\t\t\t\tif self.secureAction then\r\n\t\t\t\t\tlocal status, err = pcall(function() entry.actions[i].action() end) -- Lazer\r\n\t\t\t\t\tif not status then\r\n\t\t\t\t\t\tif self.debug then\r\n\t\t\t\t\t\t\ttools.error(err, \"red\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\ttools.error(self.trad.err_check .. entry.actions[i].getLog(), \"red\")\r\n\t\t\t\t\t\tself:addHistory(self.trad.err_check .. entry.simplelog)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tentry.actions[i].action()\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t-- envoi message push\r\n\t\t\tif entry.message ~= \"\" then\r\n\t\t\t\tif type(self.output)~=\"function\" then\r\n\t\t\t\t\tfor i = 1, #entry.portables do\r\n\t\t\t\t\t\tlocal status, err = pcall(function() self:getOption({\"Portable\", entry.portables[i], self:getMessage()}).action() end)\r\n\t\t\t\t\t\tif not status then\r\n\t\t\t\t\t\t\tif self.debug then\r\n\t\t\t\t\t\t\t\ttools.error(err, \"pink\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\t-- Message push personnalisé\r\n\t\t\t\t\tself.output(self:getMessage())\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tentry.runned = true\r\n\t\t\t-- mise à jour des écoutes --\r\n\t\t\tfor i=1, #entry.listeners do self:findEntry(entry.listeners[i]).isWaiting[entry.id] = false end\r\n\t\t\t-- remise à zéro des attente --\r\n\t\t\tfor i=1, #entry.isWaiting do entry.isWaiting[i] = true end\r\n\t\t\t-- Vérification du MaxTime\r\n\t\t\tif entry.maxtime > 0 then\r\n\t\t\t\tlocal timeleft = self.options.maxtime.getValue(entry.id)\r\n\t\t\t\tif not timeleft then\r\n\t\t\t\t\tself.options.maxtime.action(entry.id, entry.maxtime-1)\r\n\t\t\t\telse\r\n\t\t\t\t\ttimeleft = tonumber(timeleft)\r\n\t\t\t\t\tself.options.maxtime.action(entry.id, timeleft-1)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tself:addHistory(entry.simplelog)\r\n\t\t\tif not entry.repeating then entry.stopped = true end\r\n\t\tend\r\n\telse\r\n\t\tself:reset(entry)\r\n\tend\r\n\treturn ready\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Cherche un mot dans le tableau source et retourne sa valeur dans du tableau destination\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:translate(word, tableSource, tableDest)\r\n\tfor k, v in pairs(tableSource) do if tostring(v):lower() == tostring(word):lower() then return tableDest[k] end end\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Cherche un mot anglais et trouve son équivalence dans la langue locale\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:translatetrad(key, word)\r\n\tif type(self.traduction.en[key])==\"table\" then\r\n\t\tlocal res = self:translate(word, self.traduction.en[key], self.trad[key])\r\n\t\tif res then return res end\r\n\telseif self.trad[key] then\r\n\t\treturn self.trad[key]\r\n\tend\r\n\treturn word\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Remplace les éléments du message\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:getMessage(message, forAnalyse, forLog)\r\n\tif not forAnalyse then\r\n\t\tif not message then message = self.currentEntry.message end\r\n\t\tmessage = tostring(message)\r\n\t\tmessage:gsub(\"(#.-#)\", function(c)\r\n\t\t\tlocal position = tonumber(c:match(\"%[(%d+)%]\") or 1)\r\n\t\t\tc = c:gsub(\"%[\",\"%%%1\"):gsub(\"%]\",\"%%%1\")\r\n\t\t\tif c:find(\"value\") then message = message:gsub(c, tostring(self.options.result.getValue(position))) end\r\n\t\t\tif c:find(\"name\") then message = message:gsub(c, self.options.name.getValue(position)) end\r\n\t\t\tif c:find(\"room\") then message = message:gsub(c, self.options.room.getValue(position)) end\r\n\t\tend)\r\n\tend\r\n\tmessage:gsub(\"({.-})\", function(c)\r\n\t\tif forLog then\r\n\t\t\t-- ne rien faire\r\n\t\telse\r\n\t\tlocal d = tools.split(c:gsub(\"{\", \"\"):gsub(\"}\", \"\"), \",\")\r\n\t\t\tfor i = 1, #d do\r\n\t\t\t\td[i] = tools.trim(d[i])\r\n\t\t\t\tif tools.isNumber(d[i]) then d[i] = tonumber(d[i])\r\n\t\t\t\telseif d[i]:lower()==\"true\" then d[i] = true\r\n\t\t\t\telseif d[i]:lower()==\"false\" then d[i] = false\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tlocal res, mess = self:getOption(d).getValue()\r\n\t\t\tif type(mess) == \"nil\" then mess = \"n/a\" end\r\n\t\t\tmessage = message:gsub(c, tostring(mess))\r\n\t\tend\r\n\tend)\r\n--tools.debug(\"GEA:getMessage() => \" .. tostring(message)) -- DEBUG\r\n\tif not forAnalyse then\r\n\t\tmessage = message:gsub(\"#runs#\", self.options.runs.getValue())\r\n\t\tmessage = message:gsub(\"#seconds#\", self.options.seconds.getValue())\r\n\t\tmessage = message:gsub(\"#duration#\", self.options.duration.getValue())\r\n\t\tmessage = message:gsub(\"#durationfull#\", self.options.durationfull.getValue())\r\n\t\tmessage = message:gsub(\"#time#\", self.options.time.getValue())\r\n\t\tmessage = message:gsub(\"#date#\", self.options.date.getValue())\r\n\t\tmessage = message:gsub(\"#datefull#\", self.options.datefull.getValue())\r\n\t\tmessage = message:gsub(\"#trigger#\", self.options.trigger.getValue())\r\n\t\tmessage:gsub(\"#translate%(.-%)\", function(c)\r\n\t\t\tlocal key, word = c:match(\"%((.-),(.-)%)\")\r\n\t\t\tc = c:gsub(\"%[\",\"%%%1\"):gsub(\"%]\",\"%%%1\"):gsub(\"%(\",\"%%%1\"):gsub(\"%)\",\"%%%1\")\r\n\t\t\tmessage = message:gsub(c..\"#\", self.options.translate.getValue(key, word))\r\n\t\tend)\r\n\tend\r\n\tif type(self.getMessageDecorator) == \"function\" then message = self:getMessageDecorator(message) end\r\n\treturn message\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Recherche et activation des plugins scénarios\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:searchPlugins()\r\n\tif not self.auto then\r\n\t\tlocal vgplugins = self:getGlobalValue(self.pluginsvariables)\r\n\t\tif vgplugins and vgplugins ~= \"\" and vgplugins ~= \"NaN\" then\r\n\t\t\tself.plugins = json.decode(vgplugins)\r\n\t\t\tfor k, _ in pairs(self.plugins) do if k ~= \"retour\" then self.options[k] = self:copyOption(\"pluginscenario\", k) end end\r\n\t\tend\r\n\t\treturn\r\n\tend\r\n\tlocal message = self.trad.search_plugins..\" :\"\r\n\tlocal scenes = api.get(\"/scenes\")\r\n\tlocal found = false\r\n\tfor i = 1, #scenes do\r\n\t\tlocal scene = scenes[i]\r\n\t\tif scene.type and scene.type == \"lua\" then\r\n\t\t\tif string.match(scene.content, \"GEAPlugin%.version.?=.?(%d+)\") then\r\n\t\t\t\tlocal name = scene.name:lower():gsub(\"%p\", \"\"):gsub(\"%s\", \"\")\r\n\t\t\t\tmessage = message .. \" \" .. name\r\n\t\t\t\tself.plugins[name] = scene.id\r\n\t\t\t\tself.options[name] = self:copyOption(\"pluginscenario\", name)\r\n\t\t\t\tfound = true\r\n\t\t\t\tif tools.isNil(self:getGlobalValue(self.pluginsvariables)) then\r\n\t\t\t\t\ttools.info(string.format(self.trad.gea_global_create, self.pluginsvariables), \"yellow\")\r\n\t\t\t\t\tapi.post(\"/globalVariables\", {name=self.pluginsvariables, isEnum=self.varenum})\r\n\t\t\t\tend\r\n\t\t\t\tfibaro.setGlobalVariable(self.pluginsvariables, json.encode(self.plugins))\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tif not found then message = message .. \" \" .. self.trad.plugins_none end\r\n\ttools.info(message, \"yellow\")\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- RAZ d'une entrée\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:reset(entry)\r\n\tentry.count = 0\r\n\tentry.lastvalid = nil\r\n\tentry.firstvalid = nil\r\n\tentry.stopped = false\r\n\tentry.runned = false\r\n\tfor i=1, #entry.isWaiting do entry.isWaiting[i] = true end\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Decode un JSON et va chercher la propriété demandée\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:decode(flux, property)\r\n\tlocal d = json.decode(flux)\r\n\tif d then\r\n\t\tlocal lastvalue = d\r\n\t\tfor k, v in pairs(tools.split(property, \".\")) do\r\n\t\t\tif v:match(\"%[(%d+)%]\") and type(lastvalue[v:gsub(\"%[(%d+)%]\", \"\")]) == \"table\" then\r\n\t\t\t\tlocal number = tonumber(v:match(\"%[(%d+)%]\") or 1)\r\n\t\t\t\tif number then\r\n\t\t\t\t\tv = v:gsub(\"%[(%d+)%]\", \"\")\r\n\t\t\t\t\tlastvalue = lastvalue[v][number]\r\n\t\t\t\tend\r\n\t\t\telseif v:match(\"%[(%d+)%]\") then\r\n\t\t\t\tlocal number = tonumber(v:match(\"%[(%d+)%]\") or 1)\r\n\t\t\t\tif number then\r\n\t\t\t\t\tv = v:gsub(\"%[(%d+)%]\", \"\")\r\n\t\t\t\t\tlastvalue = lastvalue[number]\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif lastvalue[v] then lastvalue = lastvalue[v] end\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn lastvalue\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Permet de retourner les infos de GEA à qui besoin\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:answer(params)\r\n\t--if tools.isNil(self:getGlobalValue(self.historyvariable)) then self.history = {} else self.history = json.decode(self:getGlobalValue(self.historyvariable)) end -- Lazer\r\n\tlocal histo = quickApp:getVariable(self.historyvariable)\r\n\tif histo and histo ~= \"\" then self.history = json.decode(histo) else self.history = {} end\r\n\tif params.vdid then\r\n\t\tfor k, v in pairs(params) do\r\n\t\t\tif type(v)==\"string\" and v:match(\"%[(%d+)%]\") and type(self[v:gsub(\"%[(%d+)%]\", \"\")]) == \"table\" then\r\n\t\t\t\tlocal number = tonumber(v:match(\"%[(%d+)%]\") or 1)\r\n\t\t\t\tif number then\r\n\t\t\t\t\tv = v:gsub(\"%[(%d+)%]\", \"\")\r\n\t\t\t\t\t--fibaro.call(params.vdid, \"setProperty\", \"ui.\"..k..\".value\", tools.iif(self[v][number], tools.tostring(self[v][number]), \"\"))\r\n\t\t\t\t\tfibaro.call(params.vdid, \"updateView\", k, \"text\", tools.iif(self[v][number], tools.tostring(self[v][number]), \"\"))\r\n\t\t\t\tend\r\n\t\t\telseif type(self[v]) ~= \"function\" and type(self[v]) ~= \"nil\" then\r\n\t\t\t\t--fibaro.call(params.vdid, \"setProperty\", \"ui.\"..k..\".value\", \" \" .. tools.tostring(self[v]))\r\n\t\t\t\tfibaro.call(params.vdid, \"updateView\", k, \"text\", \" \" .. tools.tostring(self[v]))\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Optimisation du code\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:optimise()\r\n\ttools.info(self.trad.optimization, \"gray\")\r\n\tself.answer = nil\r\n\tself.insert = nil\r\n\tself.searchPlugins = nil\r\n\tself.add = nil\r\n\tself.copyOption = nil\r\n\tself.init = nil\r\n\t--setEvents = nil -- Lazer\r\n\t--config = nil\r\n\tlocal depends = \"\"\r\n\tlocal notused = {}\r\n\tfor k, v in pairs(self.options) do\r\n\t\tlocal found = false\r\n\t\tfor _, w in pairs(self.usedoptions) do\r\n\t\t\tif k == w then\r\n\t\t\t\tfound = true\r\n\t\t\t\tif v.depends then depends = depends .. table.concat(v.depends, \" \") end\r\n\t\t\tend\r\n\t\tend\r\n\t\tif not found then table.insert(notused, k) end\r\n\tend\r\n\tfor _, v in pairs(notused) do\r\n\t\tif self.options[v] and self.options[v].optimize and (not depends:find(v)) then\r\n\t\t\tif v == \"batteries\" then self.batteries = nil end\r\n\t\t\tif v == \"frequency\" then self.getFrequency = nil end\r\n\t\t\ttools.info(self.trad.removeuseless .. v, \"gray\")\r\n\t\t\tself.options[v] = nil\r\n\t\tend\r\n\tend\r\n\tself.usedoptions = nil\r\n\tfor k, _ in pairs(self.traduction) do if k ~= string.lower(self.language) and k ~= \"en\" then tools.info(self.trad.removeuselesstrad .. k, \"gray\") self.traduction[k] = nil end end\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Lance le contrôle de toutes les entrées\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:run()\r\n\r\n\tself.runAt = os.time()\r\n\tself.forceRefreshValues = false\r\n\t--self.globalvalue = self:getGlobalValue(self.globalvariables)\r\n\tself.globalvalue = quickApp:getVariable(self.globalvariables) -- Lazer\r\n\tself.nbRun = self.nbRun + 1\r\n\tif self.nbRun > 0 and math.fmod(self.nbRun, 10) == 0 then\r\n\t\tlocal garbage = collectgarbage(\"count\")\r\n\t\ttools.info(string.format(self.trad.gea_run_since, self:getDureeInString(self.runAt-self.started)) .. \" - \" .. self.trad.memoryused .. string.format(\"%.2f\", garbage) .. \" KB\" )\r\n\t\ttable.insert(self.garbagevalues, tostring(garbage))\r\n\t\tif #self.garbagevalues >= 5 then\r\n\t\t\tlocal up = true\r\n\t\t\tlocal previous = 0\r\n\t\t\tfor _, v in pairs(self.garbagevalues) do\r\n\t\t\t\tv = tonumber(v)\r\n\t\t\t\tif previous == 0 then previous = v end\r\n\t\t\t\tif v < previous then up = false end\r\n\t\t\t\tprevious = v\r\n\t\t\tend\r\n\t\t\tif up then tools.warning(self.trad.memoryused .. string.format(\"%.2f\", previous) .. \" KB\" ) end\r\n\t\tend\r\n\t\tif #self.garbagevalues >= 10 then table.remove(self.garbagevalues, 1) end\r\n\telse\r\n\t\tif --[[not self.debug and--]] self.auto then tools.debug(string.format(self.trad.gea_check_nbr, self.nbRun, (self.nbRun*self.checkEvery)), \"cyan\", true) end\r\n\t\tif self.nbRun == 1 then self:optimise() self.optimise = nil end\r\n\tend\r\n\r\n\t--self.running = string.lower(fibaro.getGlobalVariable(self.suspendvar)) ~= self.trad.yes\r\n\tself.running = string.lower(quickApp:getVariable(self.suspendvar)) ~= self.trad.yes -- Lazer\r\n\tquickApp:updateView(\"labelRunning\", \"text\", \"Running : \" .. (self.running and self.trad.yes or self.trad.no))\r\n\tif self.running then\r\n\t\tlocal nbEntries = #self.entries\r\n\t\tif nbEntries > 0 then\r\n\t\t\tfor i = 1, nbEntries do\r\n\t\t\t\tself.currentMainId = self.entries[i].mainid\r\n\t\t\t\tself.currentEntry = self.entries[i]\r\n\t\t\t\tself:check(self.entries[i])\r\n\t\t\tend\r\n\t\t\t--fibaro.setGlobalVariable(self.globalvariables, self.globalvalue)\r\n\t\t\tquickApp:setVariable(self.globalvariables, self.globalvalue) -- Lazer\r\n\t\t\t--fibaro.setGlobalVariable(self.historyvariable, json.encode(self.history))\r\n\t\t\tquickApp:setVariable(self.historyvariable, json.encode(self.history)) -- Lazer\r\n\t\tend\r\n\telse\r\n\t\ttools.warning(string.format(self.trad.gea_suspended, self.suspendvar), \"orange\", true)\r\n\tend\r\n\r\n\tif self.auto then\r\n\t\tlocal nextstart = os.difftime(self.started+(self.nbRun+1)*self.checkEvery, os.time())\r\n\t\tsetTimeout(function() self:run() end, nextstart * 1000)\r\n\tend\r\n\r\nend\r\n\r\n-- --------------------------------------------------------------------------------\r\n-- Initialisation, démarrage de GEA\r\n-- --------------------------------------------------------------------------------\r\nfunction GEA:init()\r\n\tif type(config) == \"function\" then -- Lazer\r\n\t\tconfig(self) -- Chargement des options de configuration utilisateur\r\n\tend\r\n\tif not self.language then\r\n\t\tif api then self.language = api.get(\"/settings/info\").defaultLanguage end\r\n\t\tif not self.traduction[self.language] then self.language = \"en\" end\r\n\tend\r\n\tself.trad = self.traduction[string.lower(self.language)]\r\n\tif type(self.portables) ~= \"table\" then self.portables = {self.portables} end\r\n\ttools.info(\"\") -- Ajout Lazer\r\n\tif self.auto then\r\n\t\ttools.info(\"--------------------------------------------------------------------------------\", \"cyan\")\r\n\t\ttools.info(string.format(self.trad.gea_start, self.version, self.source.type), \"cyan\")\r\n\t\ttools.info(\"--------------------------------------------------------------------------------\", \"cyan\")\r\n\t\ttools.info(string.format(self.trad.gea_minifier, tools.version), \"yellow\")\r\n\t\ttools.info(string.format(self.trad.gea_check_every, self.checkEvery), \"yellow\")\r\n\t\ttools.info(string.format(self.trad.gea_global_create, self.globalvariables), \"yellow\")\r\n\t\ttools.info(string.format(self.trad.gea_global_create, self.historyvariable), \"yellow\")\r\n\t\tquickApp:updateView(\"labelVersion\", \"text\", \"Version : \" .. self.version)\r\n\t\tquickApp:updateView(\"labelIntervalle\", \"text\", \"Intervalle : \" .. tostring(self.checkEvery) .. \"s\")\r\n\t\tquickApp:updateView(\"labelPortables\", \"text\", \"Portables : \" .. json.encode(self.portables))\r\n\t\tquickApp:updateView(\"labelDebug\", \"text\", \"Debug : \" .. (self.debug and self.trad.yes or self.trad.no))\r\n\tend\r\n\tif self.source.type ~= \"manual\" then tools.info(\"--------------------------------------------------------------------------------\") end\r\n\tlocal line, result = nil, nil\r\n\tif not self.auto then\r\n\t\tself.event = {}\r\n\t\tif self.source.type == \"device\" then\r\n\t\t\tself.event.id = self.source.id\r\n\t\t\tif self.source.propertyName and self.source.componentName then -- label ou slider\r\n\t\t\t\tself.event.label = self.source.componentName\r\n\t\t\tend\r\n\t\telseif self.source.type == \"global-variable\" then\r\n\t\t\tself.event.id = self.source.name\r\n\t\telseif self.source.type == \"alarm\" then -- Lazer\r\n\t\t\tself.event.id = self.source.id\r\n\t\telseif self.source.type == \"profile\" then -- Lazer\r\n\t\t\tself.event.id = self.source.id\r\n--[[\r\n\t\telseif self.source.type == \"manual\" and fibaro:args() then -- Note : démarrage manuel de la scène, à remplacer par une fonction dédiée au QuickApp ?\r\n\t\t\tlocal params = {}\r\n\t\t\tfor _, v in ipairs(fibaro:args()) do for h, w in pairs(v) do if h == \"gealine\" then line = w end if h == \"result\" then result = w end params[h] = w end end\r\n\t\t\tif (params.vdid) then\r\n\t\t\t\tself:answer(params)\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\telseif self.source.type == \"custom-event\" then\r\n\t\telseif self.source.type == \"date\" then\r\n\t\telseif self.source.type == \"location\" then\r\n\t\telseif self.source.type == \"panic\" then\r\n\t\telseif self.source.type == \"se-start\" then\r\n\t\telseif self.source.type == \"weather\" then\r\n\t\telseif self.source.type == \"climate\" then\r\n--]]\r\n\t\tend\r\n\t\tif self.source.type ~= \"manual\" then tools.info(string.format(self.trad.gea_start_event, self.version, self.source.type, self.event.id), \"cyan\") end\r\n\tend\r\n\t--tools.info(\"GEA:init() self.event = \" .. json.encode(self.event)) -- DEBUG\r\n\tself:searchPlugins()\r\n\tif line and result then\r\n\t\t-- retour d'un plugin\r\n\t\tif not self.plugins.retour then self.plugins.retour = {} end\r\n\t\tself.plugins.retour[line] = result\r\n\t\tfibaro.setGlobalVariable(self.pluginsvariables, json.encode(self.plugins))\r\n\t\treturn\r\n\tend\r\n\tif self.auto then\r\n\t\ttools.info(self.trad.gea_load_usercode, \"yellow\")\r\n\t\ttools.info(\"--------------------------------------------------------------------------------\")\r\n\t\t--if tools.isNil(self:getGlobalValue(self.globalvariables)) then api.post(\"/globalVariables\", {name=self.globalvariables, isEnum=self.varenum}) end -- Lazer\r\n\t\t--if tools.isNil(self:getGlobalValue(self.historyvariable)) then api.post(\"/globalVariables\", {name=self.historyvariable, isEnum=self.varenum}) end -- Lazer\r\n\t\t--if tools.isNil(self:getGlobalValue(self.suspendvar)) then api.post(\"/globalVariables\", {name=self.suspendvar, isEnum=self.varenum}) end -- Lazer\r\n\t\t--fibaro.setGlobalVariable(self.globalvariables, \"\")\r\n\t\tquickApp:setVariable(self.globalvariables, \"\") -- Lazer\r\n\t\t--fibaro.setGlobalVariable(self.historyvariable, \"\")\r\n\t\tquickApp:setVariable(self.historyvariable, \"\") -- Lazer\r\n\t\t--fibaro.setGlobalVariable(self.suspendvar, self.trad.no)\r\n\t\tlocal suspendvar = quickApp:getVariable(self.suspendvar)\r\n\t\tif not suspendvar or suspendvar == \"\" then\r\n\t\t\tquickApp:setVariable(self.suspendvar, self.trad.no) -- Lazer\r\n\t\tend\r\n\t\t--local histo = self:getGlobalValue(self.historyvariable)\r\n\t\tlocal histo = quickApp:getVariable(self.historyvariable) -- Lazer\r\n\t\tif histo and histo ~= \"\" then self.history = json.decode(histo) else self.history = {} end\r\n\tend\r\n\t--self.globalvalue = self:getGlobalValue(self.globalvariables)\r\n\tself.globalvalue = quickApp:getVariable(self.globalvariables) -- Lazer\r\n\tsetEvents() -- Chargement des règles utilisateur\r\n\ttools.isdebug = self.debug\r\n\tif #self.entries == 0 then tools.warning(self.trad.gea_nothing) end\r\n\ttools.info(\"--------------------------------------------------------------------------------\")\r\n\tself.control = false\r\n\tif #self.entries > 0 then\r\n\t\tself.started = os.time()\r\n\t\tif self.auto then tools.info(string.format(self.trad.gea_start_time, os.date(self.trad.date_format, self.started), os.date(self.trad.hour_format, self.started))) end\r\n\t\tself:run()\r\n\telse\r\n\t\tif self.auto then\r\n\t\t\ttools.info(self.trad.gea_stopped_auto, \"yellow\")\r\n\t\t\treturn\r\n\t\telse\r\n\t\t\ttools.warning(string.format(self.trad.no_entry_for_event, self.options.trigger.getValue()), \"orange\")\r\n\t\tend\r\n\tend\r\nend\r\n\r\n\r\n\r\n-- ================================================================================\r\n-- M A I N ... démarrage de GEA\r\n-- ================================================================================\r\n\r\nfunction QuickApp:onInit()\r\n\tsetTimeout(self.start, 0)\r\nend\r\n\r\n\r\nfunction QuickApp:start()\r\n\r\n\t-- Initialisation\r\n\ttriggers = {}\r\n\tlocal lastRefresh = 0\r\n\tlocal http = net.HTTPClient()\r\n\r\n\t-- Démarre l'instance principale de GEA\r\n\tGEA_auto = GEA({type = \"autostart\"})\r\n\tGEA_auto:init()\r\n\r\n\t-- Boucle d'attente d'événements instantanés\r\n\tlocal function loop()\r\n\t\tlocal stat,res = http:request(\"http://127.0.0.1:11111/api/refreshStates?last=\" .. lastRefresh, {\r\n\t\t\tsuccess = function(res)\r\n\t\t\t\tlocal states = json.decode(res.data)\r\n\t\t\t\tif type(states) == \"table\" then\r\n\t\t\t\t\tlastRefresh = states.last or 0\r\n\t\t\t\t\tfor _, event in ipairs(states.events or {}) do\r\n\t\t\t\t\t\tfor i = 1, #triggers do\r\n\t\t\t\t\t\t\t--tools.debug(json.encode(triggers[i]))\r\n\t\t\t\t\t\t\tif tools.filterEvent(event, triggers[i].filter) then\r\n\t\t\t\t\t\t\t\tif self.lldebug then tools.debug(\"Event : \" .. json.encode(triggers[i].filter), \"blue\") end\r\n\t\t\t\t\t\t\t\tif GEA_event then\r\n\t\t\t\t\t\t\t\t\t-- n'est jamais censé se produire\r\n\t\t\t\t\t\t\t\t\ttools.warning(\"GEA_event existe déjà\", \"orange\")\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t-- Démarre une instance instantanée de GEA\r\n\t\t\t\t\t\t\t\t\tGEA_event = GEA(triggers[i].event)\r\n\t\t\t\t\t\t\t\t\tGEA_event:init()\r\n\t\t\t\t\t\t\t\t\tGEA_event = nil\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t--fibaro.setGlobalVariable(tickEvent, tostring(os.clock()) -- Hack because refreshState hangs if no event : https://forum.fibaro.com/topic/49113-hc3-quickapps-coding-tips-and-tricks/?tab=comments#comment-201173\r\n\t\t\t\tsetTimeout(loop, GEA_auto.refreshInterval)\r\n\t\t\tend,\r\n\t\t\terror = function(res)\r\n\t\t\t\tself:error(\"Error : refreshStates : \" .. res)\r\n\t\t\t\tsetTimeout(loop, 2 * GEA_auto.refreshInterval)\r\n\t\t\tend,\r\n\t\t})\r\n\tend\r\n\r\n\tif #triggers > 0 then\r\n\t\t--tools.warning(\"triggers[\" .. #triggers .. \"] => \" .. json.encode(triggers))\r\n\t\tfor i = 1, #triggers do\r\n\t\t\t--tools.info(\"ID : \" .. json.encode(triggers[i]), \"blue\")\r\n\t\t\ttools.info(GEA_auto.trad.instant_trigger .. triggers[i].event.type\r\n\t\t\t\t.. \" \" .. (triggers[i].event.id or triggers[i].event.name)\r\n\t\t\t\t.. \" \" .. (triggers[i].event.property or triggers[i].event.propertyName or \"\") .. \" \" .. (triggers[i].event.componentName or \"\")\r\n\t\t\t\t.. \" \" .. (triggers[i].event.value and (triggers[i].event.value.keyId or \" \") .. \" \" .. (triggers[i].event.value.keyAttribute or \" \") or \"\")\r\n\t\t\t\t, \"blue\")\r\n\t\tend\r\n\t\tloop()\r\n\tend\r\n\r\nend\r\n\r\n\r\nfunction QuickApp:buttonON_onReleased(event)\r\n\tself:trace(\"Réactivation de GEA\")\r\n\tquickApp:setVariable(GEA_auto.suspendvar, GEA_auto.trad.no)\r\n\tself:updateView(\"labelRunning\", \"text\", \"Running : \" .. GEA_auto.trad.yes)\r\nend\r\n\r\n\r\nfunction QuickApp:buttonOFF_onReleased(event)\r\n\tself:trace(\"Désactivation de GEA\")\r\n\tquickApp:setVariable(GEA_auto.suspendvar, GEA_auto.trad.yes)\r\n\tself:updateView(\"labelRunning\", \"text\", \"Running : \" .. GEA_auto.trad.no)\r\nend\r\n"},{"name":"config","isMain":false,"isOpen":true,"content":"function config(GEA)\r\n\t-- ===================================================\r\n\t-- Configuration générale\r\n\t-- ===================================================\r\n\tGEA.debug = true\r\n\tGEA.checkEvery = 30\r\n\tGEA.portables = {}\r\n\tGEA.secureAction = true\r\n\tGEA.language = \"fr\"\r\nend\r\n\r\nfunction setEvents()\r\n\t-- ==========================================================\r\n\t-- Règles utilisateur\r\n\t-- ==========================================================\r\n\r\n\tlocal id = {\r\n\t}\r\n\r\n\tGEA.add(true, 0, \"Démarrage de GEA le #date# à #time#\", nil, \"Démarrage GEA\")\r\n\tGEA.add({\"Info+\", \"serverStatus\", os.time()-120}, 0, \"Box redémarrée à #time# le #date#\", nil, \"Démarrage box\")\r\n\tGEA.add({\"Info\", \"updateStableAvailable\", true}, 24*60*60, \"Une nouvelle version est disponible\", nil, \"Détection nouvelle version\")\r\n\tGEA.add({\"Info\", \"updateBetaAvailable\", true}, 24*60*60, \"Une nouvelle version BETA est disponible\", nil, \"Détection nouvelle version beta\")\r\n\r\nend\r\n"}]}